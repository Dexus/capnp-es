// This file has been automatically generated by capnp-es. 
import * as $ from "capnp-es";
export const _capnpFileId = BigInt("0xd508eebdc2dc42b8");
export const TestEnum = {
  FOO: 0,
  BAR: 1,
  BAZ: 2,
  QUX: 3,
  QUUX: 4,
  CORGE: 5,
  GRAULT: 6,
  GARPLY: 7
} as const;
export type TestEnum = (typeof TestEnum)[keyof typeof TestEnum];
export class TestAllTypes extends $.Struct {
  static readonly _capnp = {
    displayName: "TestAllTypes",
    id: "a0a8f314b80b63fd",
    size: new $.ObjectSize(48, 20)
  };
  static _StructList: $.ListCtor<TestAllTypes>;
  getBoolField(): boolean {
    return $.Struct.getBit(0, this);
  }
  setBoolField(value: boolean): void {
    $.Struct.setBit(0, value, this);
  }
  getInt8Field(): number {
    return $.Struct.getInt8(1, this);
  }
  setInt8Field(value: number): void {
    $.Struct.setInt8(1, value, this);
  }
  getInt16Field(): number {
    return $.Struct.getInt16(2, this);
  }
  setInt16Field(value: number): void {
    $.Struct.setInt16(2, value, this);
  }
  getInt32Field(): number {
    return $.Struct.getInt32(4, this);
  }
  setInt32Field(value: number): void {
    $.Struct.setInt32(4, value, this);
  }
  getInt64Field(): bigint {
    return $.Struct.getInt64(8, this);
  }
  setInt64Field(value: bigint): void {
    $.Struct.setInt64(8, value, this);
  }
  getUInt8Field(): number {
    return $.Struct.getUint8(16, this);
  }
  setUInt8Field(value: number): void {
    $.Struct.setUint8(16, value, this);
  }
  getUInt16Field(): number {
    return $.Struct.getUint16(18, this);
  }
  setUInt16Field(value: number): void {
    $.Struct.setUint16(18, value, this);
  }
  getUInt32Field(): number {
    return $.Struct.getUint32(20, this);
  }
  setUInt32Field(value: number): void {
    $.Struct.setUint32(20, value, this);
  }
  getUInt64Field(): bigint {
    return $.Struct.getUint64(24, this);
  }
  setUInt64Field(value: bigint): void {
    $.Struct.setUint64(24, value, this);
  }
  getFloat32Field(): number {
    return $.Struct.getFloat32(32, this);
  }
  setFloat32Field(value: number): void {
    $.Struct.setFloat32(32, value, this);
  }
  getFloat64Field(): number {
    return $.Struct.getFloat64(40, this);
  }
  setFloat64Field(value: number): void {
    $.Struct.setFloat64(40, value, this);
  }
  getTextField(): string {
    return $.Struct.getText(0, this);
  }
  setTextField(value: string): void {
    $.Struct.setText(0, value, this);
  }
  adoptDataField(value: $.Orphan<$.Data>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownDataField(): $.Orphan<$.Data> {
    return $.Struct.disown(this.getDataField());
  }
  getDataField(): $.Data {
    return $.Struct.getData(1, this);
  }
  hasDataField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initDataField(length: number): $.Data {
    return $.Struct.initData(1, length, this);
  }
  setDataField(value: $.Data): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptStructField(value: $.Orphan<TestAllTypes>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownStructField(): $.Orphan<TestAllTypes> {
    return $.Struct.disown(this.getStructField());
  }
  getStructField(): TestAllTypes {
    return $.Struct.getStruct(2, TestAllTypes, this);
  }
  hasStructField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initStructField(): TestAllTypes {
    return $.Struct.initStructAt(2, TestAllTypes, this);
  }
  setStructField(value: TestAllTypes): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  getEnumField(): TestEnum {
    return $.Struct.getUint16(36, this) as TestEnum;
  }
  setEnumField(value: TestEnum): void {
    $.Struct.setUint16(36, value, this);
  }
  adoptVoidList(value: $.Orphan<$.List<$.Void>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownVoidList(): $.Orphan<$.List<$.Void>> {
    return $.Struct.disown(this.getVoidList());
  }
  getVoidList(): $.List<$.Void> {
    return $.Struct.getList(3, $.VoidList, this);
  }
  hasVoidList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initVoidList(length: number): $.List<$.Void> {
    return $.Struct.initList(3, $.VoidList, length, this);
  }
  setVoidList(value: $.List<$.Void>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  adoptBoolList(value: $.Orphan<$.List<boolean>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(4, this));
  }
  disownBoolList(): $.Orphan<$.List<boolean>> {
    return $.Struct.disown(this.getBoolList());
  }
  getBoolList(): $.List<boolean> {
    return $.Struct.getList(4, $.BoolList, this);
  }
  hasBoolList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(4, this));
  }
  initBoolList(length: number): $.List<boolean> {
    return $.Struct.initList(4, $.BoolList, length, this);
  }
  setBoolList(value: $.List<boolean>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(4, this));
  }
  adoptInt8List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(5, this));
  }
  disownInt8List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getInt8List());
  }
  getInt8List(): $.List<number> {
    return $.Struct.getList(5, $.Int8List, this);
  }
  hasInt8List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(5, this));
  }
  initInt8List(length: number): $.List<number> {
    return $.Struct.initList(5, $.Int8List, length, this);
  }
  setInt8List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(5, this));
  }
  adoptInt16List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(6, this));
  }
  disownInt16List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getInt16List());
  }
  getInt16List(): $.List<number> {
    return $.Struct.getList(6, $.Int16List, this);
  }
  hasInt16List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(6, this));
  }
  initInt16List(length: number): $.List<number> {
    return $.Struct.initList(6, $.Int16List, length, this);
  }
  setInt16List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(6, this));
  }
  adoptInt32List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(7, this));
  }
  disownInt32List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getInt32List());
  }
  getInt32List(): $.List<number> {
    return $.Struct.getList(7, $.Int32List, this);
  }
  hasInt32List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(7, this));
  }
  initInt32List(length: number): $.List<number> {
    return $.Struct.initList(7, $.Int32List, length, this);
  }
  setInt32List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(7, this));
  }
  adoptInt64List(value: $.Orphan<$.List<bigint>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(8, this));
  }
  disownInt64List(): $.Orphan<$.List<bigint>> {
    return $.Struct.disown(this.getInt64List());
  }
  getInt64List(): $.List<bigint> {
    return $.Struct.getList(8, $.Int64List, this);
  }
  hasInt64List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(8, this));
  }
  initInt64List(length: number): $.List<bigint> {
    return $.Struct.initList(8, $.Int64List, length, this);
  }
  setInt64List(value: $.List<bigint>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(8, this));
  }
  adoptUInt8List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(9, this));
  }
  disownUInt8List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getUInt8List());
  }
  getUInt8List(): $.List<number> {
    return $.Struct.getList(9, $.Uint8List, this);
  }
  hasUInt8List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(9, this));
  }
  initUInt8List(length: number): $.List<number> {
    return $.Struct.initList(9, $.Uint8List, length, this);
  }
  setUInt8List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(9, this));
  }
  adoptUInt16List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(10, this));
  }
  disownUInt16List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getUInt16List());
  }
  getUInt16List(): $.List<number> {
    return $.Struct.getList(10, $.Uint16List, this);
  }
  hasUInt16List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(10, this));
  }
  initUInt16List(length: number): $.List<number> {
    return $.Struct.initList(10, $.Uint16List, length, this);
  }
  setUInt16List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(10, this));
  }
  adoptUInt32List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(11, this));
  }
  disownUInt32List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getUInt32List());
  }
  getUInt32List(): $.List<number> {
    return $.Struct.getList(11, $.Uint32List, this);
  }
  hasUInt32List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(11, this));
  }
  initUInt32List(length: number): $.List<number> {
    return $.Struct.initList(11, $.Uint32List, length, this);
  }
  setUInt32List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(11, this));
  }
  adoptUInt64List(value: $.Orphan<$.List<bigint>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(12, this));
  }
  disownUInt64List(): $.Orphan<$.List<bigint>> {
    return $.Struct.disown(this.getUInt64List());
  }
  getUInt64List(): $.List<bigint> {
    return $.Struct.getList(12, $.Uint64List, this);
  }
  hasUInt64List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(12, this));
  }
  initUInt64List(length: number): $.List<bigint> {
    return $.Struct.initList(12, $.Uint64List, length, this);
  }
  setUInt64List(value: $.List<bigint>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(12, this));
  }
  adoptFloat32List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(13, this));
  }
  disownFloat32List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getFloat32List());
  }
  getFloat32List(): $.List<number> {
    return $.Struct.getList(13, $.Float32List, this);
  }
  hasFloat32List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(13, this));
  }
  initFloat32List(length: number): $.List<number> {
    return $.Struct.initList(13, $.Float32List, length, this);
  }
  setFloat32List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(13, this));
  }
  adoptFloat64List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(14, this));
  }
  disownFloat64List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getFloat64List());
  }
  getFloat64List(): $.List<number> {
    return $.Struct.getList(14, $.Float64List, this);
  }
  hasFloat64List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(14, this));
  }
  initFloat64List(length: number): $.List<number> {
    return $.Struct.initList(14, $.Float64List, length, this);
  }
  setFloat64List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(14, this));
  }
  adoptTextList(value: $.Orphan<$.List<string>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(15, this));
  }
  disownTextList(): $.Orphan<$.List<string>> {
    return $.Struct.disown(this.getTextList());
  }
  getTextList(): $.List<string> {
    return $.Struct.getList(15, $.TextList, this);
  }
  hasTextList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(15, this));
  }
  initTextList(length: number): $.List<string> {
    return $.Struct.initList(15, $.TextList, length, this);
  }
  setTextList(value: $.List<string>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(15, this));
  }
  adoptDataList(value: $.Orphan<$.List<$.Data>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(16, this));
  }
  disownDataList(): $.Orphan<$.List<$.Data>> {
    return $.Struct.disown(this.getDataList());
  }
  getDataList(): $.List<$.Data> {
    return $.Struct.getList(16, $.DataList, this);
  }
  hasDataList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(16, this));
  }
  initDataList(length: number): $.List<$.Data> {
    return $.Struct.initList(16, $.DataList, length, this);
  }
  setDataList(value: $.List<$.Data>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(16, this));
  }
  adoptStructList(value: $.Orphan<$.List<TestAllTypes>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(17, this));
  }
  disownStructList(): $.Orphan<$.List<TestAllTypes>> {
    return $.Struct.disown(this.getStructList());
  }
  getStructList(): $.List<TestAllTypes> {
    return $.Struct.getList(17, TestAllTypes._StructList, this);
  }
  hasStructList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(17, this));
  }
  initStructList(length: number): $.List<TestAllTypes> {
    return $.Struct.initList(17, TestAllTypes._StructList, length, this);
  }
  setStructList(value: $.List<TestAllTypes>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(17, this));
  }
  adoptEnumList(value: $.Orphan<$.List<TestEnum>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(18, this));
  }
  disownEnumList(): $.Orphan<$.List<TestEnum>> {
    return $.Struct.disown(this.getEnumList());
  }
  getEnumList(): $.List<TestEnum> {
    return $.Struct.getList(18, $.Uint16List, this) as $.List<TestEnum>;
  }
  hasEnumList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(18, this));
  }
  initEnumList(length: number): $.List<TestEnum> {
    return $.Struct.initList(18, $.Uint16List, length, this) as $.List<TestEnum>;
  }
  setEnumList(value: $.List<TestEnum>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(18, this));
  }
  adoptInterfaceList(value: $.Orphan<$.List<$.Void>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(19, this));
  }
  disownInterfaceList(): $.Orphan<$.List<$.Void>> {
    return $.Struct.disown(this.getInterfaceList());
  }
  getInterfaceList(): $.List<$.Void> {
    return $.Struct.getList(19, $.VoidList, this);
  }
  hasInterfaceList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(19, this));
  }
  initInterfaceList(length: number): $.List<$.Void> {
    return $.Struct.initList(19, $.VoidList, length, this);
  }
  setInterfaceList(value: $.List<$.Void>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(19, this));
  }
  toString(): string {
    return "TestAllTypes_" + super.toString();
  }
}
export class TestDefaults extends $.Struct {
  static readonly _capnp = {
    displayName: "TestDefaults",
    id: "eb3f9ebe98c73cb6",
    size: new $.ObjectSize(48, 20),
    defaultBoolField: $.getBitMask(true, 0),
    defaultInt8Field: $.getInt8Mask(-123),
    defaultInt16Field: $.getInt16Mask(-12345),
    defaultInt32Field: $.getInt32Mask(-12345678),
    defaultInt64Field: $.getInt64Mask(-BigInt("0x7048860ddf79")),
    defaultUInt8Field: $.getUint8Mask(234),
    defaultUInt16Field: $.getUint16Mask(45678),
    defaultUInt32Field: $.getUint32Mask(3456789012),
    defaultUInt64Field: $.getUint64Mask(BigInt("0xab54a98ceb1f0ad2")),
    defaultFloat32Field: $.getFloat32Mask(1234.5),
    defaultFloat64Field: $.getFloat64Mask(-1.23e+47),
    defaultTextField: "foo",
    defaultDataField: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x1a, 0x07, 0x62, 0x61, 0x72]).buffer),
    defaultStructField: $.readRawPointer(new Uint8Array([0x10, 0xd0, 0x50, 0x06, 0x14, 0xff, 0x01, 0xf4, 0x80, 0x0d, 0x0e, 0x10, 0x4c, 0xfb, 0x00, 0x3f, 0x4e, 0x73, 0xe8, 0x38, 0xa6, 0x33, 0xfd, 0x5a, 0xd2, 0x04, 0x14, 0x88, 0x62, 0x03, 0xff, 0xd2, 0x0a, 0x6f, 0x12, 0x21, 0x19, 0xcc, 0x04, 0x00, 0x1f, 0x5f, 0x70, 0x09, 0xaf, 0x02, 0xe0, 0x90, 0x75, 0x40, 0x11, 0x4d, 0x22, 0x11, 0x4d, 0x1a, 0x51, 0x4c, 0x06, 0x14, 0x13, 0x25, 0x01, 0x18, 0x13, 0x21, 0x01, 0x29, 0x13, 0x21, 0x01, 0x22, 0x13, 0x21, 0x01, 0x23, 0x13, 0x21, 0x01, 0x24, 0x13, 0x25, 0x01, 0x25, 0x13, 0x31, 0x01, 0x22, 0x13, 0x31, 0x01, 0x23, 0x13, 0x31, 0x01, 0x24, 0x13, 0x35, 0x01, 0x25, 0x13, 0x41, 0x01, 0x34, 0x13, 0x49, 0x01, 0x35, 0x13, 0x5d, 0x01, 0x1e, 0x13, 0x71, 0x01, 0x1e, 0x33, 0x85, 0x01, 0x77, 0x02, 0x13, 0xd5, 0x02, 0x1b, 0x00, 0x00, 0x07, 0x62, 0x61, 0x7a, 0x07, 0x71, 0x75, 0x78, 0x00, 0x05, 0x11, 0x4d, 0x3a, 0x00, 0x00, 0x51, 0x48, 0x06, 0x14, 0x00, 0x10, 0x3f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x00, 0x05, 0x11, 0x4d, 0x72, 0x00, 0x12, 0xff, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6e, 0x00, 0x1f, 0x65, 0x73, 0x74, 0x65, 0x64, 0x01, 0x1a, 0x0f, 0x0c, 0xde, 0x80, 0x7f, 0xef, 0xd2, 0x04, 0xd2, 0xe9, 0x80, 0xff, 0x7f, 0xf7, 0x4e, 0x61, 0xbc, 0x40, 0xd3, 0xa0, 0xfa, 0xf8, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x79, 0xdf, 0x0d, 0x86, 0x48, 0x70, 0xff, 0x2e, 0x75, 0x13, 0xfd, 0x8a, 0x96, 0xfd, 0xff, 0x00, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x0b, 0x0c, 0x22, 0xff, 0xcf, 0xd2, 0x04, 0x2e, 0x16, 0xff, 0xff, 0xf7, 0x4e, 0x61, 0xbc, 0xc0, 0x2c, 0x5f, 0x05, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x79, 0xdf, 0x0d, 0x86, 0x48, 0x70, 0x7f, 0xd2, 0x8a, 0xec, 0x02, 0x75, 0x69, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf0, 0x38, 0xb4, 0x96, 0x49, 0xff, 0xc2, 0xbd, 0xf0, 0x7c, 0xc2, 0xbd, 0xf0, 0xfc, 0x01, 0xea, 0x1c, 0x08, 0x02, 0xea, 0x1c, 0x08, 0x82, 0x00, 0x00, 0xff, 0x40, 0xde, 0x77, 0x83, 0x21, 0x12, 0xdc, 0x42, 0x04, 0x29, 0x90, 0x23, 0xca, 0xe5, 0xc8, 0x76, 0x7f, 0x29, 0x90, 0x23, 0xca, 0xe5, 0xc8, 0x76, 0xff, 0x91, 0xf7, 0x50, 0x37, 0x9e, 0x78, 0x66, 0x00, 0x91, 0xf7, 0x50, 0x37, 0x9e, 0x78, 0x66, 0x80, 0x11, 0x09, 0x2a, 0x11, 0x09, 0x32, 0x11, 0x09, 0x3a, 0x0f, 0x71, 0x75, 0x75, 0x78, 0x1f, 0x63, 0x6f, 0x72, 0x67, 0x65, 0x3f, 0x67, 0x72, 0x61, 0x75, 0x6c, 0x74, 0x11, 0x09, 0x32, 0x11, 0x09, 0x2a, 0x11, 0x09, 0x22, 0x3f, 0x67, 0x61, 0x72, 0x70, 0x6c, 0x79, 0x1f, 0x77, 0x61, 0x6c, 0x64, 0x6f, 0x0f, 0x66, 0x72, 0x65, 0x64, 0x51, 0x0c, 0x06, 0x14, 0x00, 0x05, 0x13, 0x1d, 0x01, 0x7a, 0x00, 0x18, 0x11, 0xbd, 0x7a, 0x00, 0x18, 0x11, 0x5d, 0x7a, 0x00, 0x12, 0xff, 0x78, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x3f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x31, 0xff, 0x78, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x3f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x32, 0xff, 0x78, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x3f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x33, 0x15, 0x03, 0x01, 0x06]).buffer),
    defaultEnumField: $.getUint16Mask(5),
    defaultVoidList: $.readRawPointer(new Uint8Array([0x10, 0x01, 0x11, 0x01, 0x30]).buffer),
    defaultBoolList: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x21, 0x01, 0x09]).buffer),
    defaultInt8List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x12, 0x03, 0x6f, 0x91]).buffer),
    defaultInt16List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x13, 0x0f, 0x67, 0x2b, 0x99, 0xd4]).buffer),
    defaultInt32List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x14, 0xff, 0xc7, 0x6b, 0x9f, 0x06, 0x39, 0x94, 0x60, 0xf9, 0x00]).buffer),
    defaultInt64List: $.readRawPointer(new Uint8Array([0x10, 0x03, 0x11, 0x01, 0x15, 0xff, 0xc7, 0x71, 0xc4, 0x2b, 0xab, 0x75, 0x6b, 0x0f, 0x01, 0x39, 0x8e, 0x3b, 0xd4, 0x54, 0x8a, 0x94, 0xf0]).buffer),
    defaultUInt8List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x12, 0x03, 0x6f, 0xde]).buffer),
    defaultUInt16List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x13, 0x0f, 0x35, 0x82, 0x9c, 0xad]).buffer),
    defaultUInt32List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x0c, 0x0f, 0x55, 0xa1, 0xae, 0xc6]).buffer),
    defaultUInt64List: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x0d, 0xff, 0xc7, 0x71, 0xac, 0xb5, 0xaf, 0x98, 0x32, 0x9a, 0x00]).buffer),
    defaultFloat32List: $.readRawPointer(new Uint8Array([0x10, 0x03, 0x11, 0x01, 0x24, 0xce, 0x9c, 0xad, 0x45, 0x80, 0x7f, 0xcc, 0x80, 0xff, 0xc0, 0x7f]).buffer),
    defaultFloat64List: $.readRawPointer(new Uint8Array([0x10, 0x05, 0x11, 0x01, 0x25, 0xf0, 0xc0, 0x61, 0xbe, 0x40, 0xc0, 0xf0, 0x7f, 0xc0, 0xf0, 0xff, 0xc0, 0xf8, 0x7f]).buffer),
    defaultTextList: $.readRawPointer(new Uint8Array([0x10, 0x07, 0x11, 0x01, 0x1e, 0x11, 0x09, 0x32, 0x11, 0x09, 0x32, 0x11, 0x09, 0x2a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x68, 0x1f, 0x78, 0x79, 0x7a, 0x7a, 0x79, 0x0f, 0x74, 0x68, 0x75, 0x64]).buffer),
    defaultDataList: $.readRawPointer(new Uint8Array([0x10, 0x08, 0x11, 0x01, 0x1e, 0x11, 0x09, 0x22, 0x11, 0x09, 0x4a, 0x11, 0x0d, 0x3a, 0x0f, 0x6f, 0x6f, 0x70, 0x73, 0xff, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x00, 0x01, 0x64, 0x7f, 0x72, 0x66, 0x63, 0x33, 0x30, 0x39, 0x32]).buffer),
    defaultStructList: $.readRawPointer(new Uint8Array([0x10, 0x56, 0x31, 0x01, 0x77, 0x02, 0x51, 0x0c, 0x06, 0x14, 0x00, 0x05, 0x13, 0x1d, 0x01, 0x6a, 0x00, 0x18, 0x11, 0xbd, 0x6a, 0x00, 0x18, 0x11, 0x5d, 0x6a, 0x00, 0x12, 0xff, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6c, 0x69, 0x00, 0x0f, 0x73, 0x74, 0x20, 0x31, 0xff, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6c, 0x69, 0x00, 0x0f, 0x73, 0x74, 0x20, 0x32, 0xff, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6c, 0x69, 0x00, 0x0f, 0x73, 0x74, 0x20, 0x33]).buffer),
    defaultEnumList: $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x13, 0x04, 0x07]).buffer)
  };
  static _StructList: $.ListCtor<TestAllTypes>;
  getBoolField(): boolean {
    return $.Struct.getBit(0, this, TestDefaults._capnp.defaultBoolField);
  }
  setBoolField(value: boolean): void {
    $.Struct.setBit(0, value, this, TestDefaults._capnp.defaultBoolField);
  }
  getInt8Field(): number {
    return $.Struct.getInt8(1, this, TestDefaults._capnp.defaultInt8Field);
  }
  setInt8Field(value: number): void {
    $.Struct.setInt8(1, value, this, TestDefaults._capnp.defaultInt8Field);
  }
  getInt16Field(): number {
    return $.Struct.getInt16(2, this, TestDefaults._capnp.defaultInt16Field);
  }
  setInt16Field(value: number): void {
    $.Struct.setInt16(2, value, this, TestDefaults._capnp.defaultInt16Field);
  }
  getInt32Field(): number {
    return $.Struct.getInt32(4, this, TestDefaults._capnp.defaultInt32Field);
  }
  setInt32Field(value: number): void {
    $.Struct.setInt32(4, value, this, TestDefaults._capnp.defaultInt32Field);
  }
  getInt64Field(): bigint {
    return $.Struct.getInt64(8, this, TestDefaults._capnp.defaultInt64Field);
  }
  setInt64Field(value: bigint): void {
    $.Struct.setInt64(8, value, this, TestDefaults._capnp.defaultInt64Field);
  }
  getUInt8Field(): number {
    return $.Struct.getUint8(16, this, TestDefaults._capnp.defaultUInt8Field);
  }
  setUInt8Field(value: number): void {
    $.Struct.setUint8(16, value, this, TestDefaults._capnp.defaultUInt8Field);
  }
  getUInt16Field(): number {
    return $.Struct.getUint16(18, this, TestDefaults._capnp.defaultUInt16Field);
  }
  setUInt16Field(value: number): void {
    $.Struct.setUint16(18, value, this, TestDefaults._capnp.defaultUInt16Field);
  }
  getUInt32Field(): number {
    return $.Struct.getUint32(20, this, TestDefaults._capnp.defaultUInt32Field);
  }
  setUInt32Field(value: number): void {
    $.Struct.setUint32(20, value, this, TestDefaults._capnp.defaultUInt32Field);
  }
  getUInt64Field(): bigint {
    return $.Struct.getUint64(24, this, TestDefaults._capnp.defaultUInt64Field);
  }
  setUInt64Field(value: bigint): void {
    $.Struct.setUint64(24, value, this, TestDefaults._capnp.defaultUInt64Field);
  }
  getFloat32Field(): number {
    return $.Struct.getFloat32(32, this, TestDefaults._capnp.defaultFloat32Field);
  }
  setFloat32Field(value: number): void {
    $.Struct.setFloat32(32, value, this, TestDefaults._capnp.defaultFloat32Field);
  }
  getFloat64Field(): number {
    return $.Struct.getFloat64(40, this, TestDefaults._capnp.defaultFloat64Field);
  }
  setFloat64Field(value: number): void {
    $.Struct.setFloat64(40, value, this, TestDefaults._capnp.defaultFloat64Field);
  }
  getTextField(): string {
    return $.Struct.getText(0, this, TestDefaults._capnp.defaultTextField);
  }
  setTextField(value: string): void {
    $.Struct.setText(0, value, this);
  }
  adoptDataField(value: $.Orphan<$.Data>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownDataField(): $.Orphan<$.Data> {
    return $.Struct.disown(this.getDataField());
  }
  getDataField(): $.Data {
    return $.Struct.getData(1, this, TestDefaults._capnp.defaultDataField);
  }
  hasDataField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initDataField(length: number): $.Data {
    return $.Struct.initData(1, length, this);
  }
  setDataField(value: $.Data): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptStructField(value: $.Orphan<TestAllTypes>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownStructField(): $.Orphan<TestAllTypes> {
    return $.Struct.disown(this.getStructField());
  }
  getStructField(): TestAllTypes {
    return $.Struct.getStruct(2, TestAllTypes, this, TestDefaults._capnp.defaultStructField);
  }
  hasStructField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initStructField(): TestAllTypes {
    return $.Struct.initStructAt(2, TestAllTypes, this);
  }
  setStructField(value: TestAllTypes): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  getEnumField(): TestEnum {
    return $.Struct.getUint16(36, this, TestDefaults._capnp.defaultEnumField) as TestEnum;
  }
  setEnumField(value: TestEnum): void {
    $.Struct.setUint16(36, value, this, TestDefaults._capnp.defaultEnumField);
  }
  adoptVoidList(value: $.Orphan<$.List<$.Void>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownVoidList(): $.Orphan<$.List<$.Void>> {
    return $.Struct.disown(this.getVoidList());
  }
  getVoidList(): $.List<$.Void> {
    return $.Struct.getList(3, $.VoidList, this, TestDefaults._capnp.defaultVoidList);
  }
  hasVoidList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initVoidList(length: number): $.List<$.Void> {
    return $.Struct.initList(3, $.VoidList, length, this);
  }
  setVoidList(value: $.List<$.Void>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  adoptBoolList(value: $.Orphan<$.List<boolean>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(4, this));
  }
  disownBoolList(): $.Orphan<$.List<boolean>> {
    return $.Struct.disown(this.getBoolList());
  }
  getBoolList(): $.List<boolean> {
    return $.Struct.getList(4, $.BoolList, this, TestDefaults._capnp.defaultBoolList);
  }
  hasBoolList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(4, this));
  }
  initBoolList(length: number): $.List<boolean> {
    return $.Struct.initList(4, $.BoolList, length, this);
  }
  setBoolList(value: $.List<boolean>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(4, this));
  }
  adoptInt8List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(5, this));
  }
  disownInt8List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getInt8List());
  }
  getInt8List(): $.List<number> {
    return $.Struct.getList(5, $.Int8List, this, TestDefaults._capnp.defaultInt8List);
  }
  hasInt8List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(5, this));
  }
  initInt8List(length: number): $.List<number> {
    return $.Struct.initList(5, $.Int8List, length, this);
  }
  setInt8List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(5, this));
  }
  adoptInt16List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(6, this));
  }
  disownInt16List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getInt16List());
  }
  getInt16List(): $.List<number> {
    return $.Struct.getList(6, $.Int16List, this, TestDefaults._capnp.defaultInt16List);
  }
  hasInt16List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(6, this));
  }
  initInt16List(length: number): $.List<number> {
    return $.Struct.initList(6, $.Int16List, length, this);
  }
  setInt16List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(6, this));
  }
  adoptInt32List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(7, this));
  }
  disownInt32List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getInt32List());
  }
  getInt32List(): $.List<number> {
    return $.Struct.getList(7, $.Int32List, this, TestDefaults._capnp.defaultInt32List);
  }
  hasInt32List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(7, this));
  }
  initInt32List(length: number): $.List<number> {
    return $.Struct.initList(7, $.Int32List, length, this);
  }
  setInt32List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(7, this));
  }
  adoptInt64List(value: $.Orphan<$.List<bigint>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(8, this));
  }
  disownInt64List(): $.Orphan<$.List<bigint>> {
    return $.Struct.disown(this.getInt64List());
  }
  getInt64List(): $.List<bigint> {
    return $.Struct.getList(8, $.Int64List, this, TestDefaults._capnp.defaultInt64List);
  }
  hasInt64List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(8, this));
  }
  initInt64List(length: number): $.List<bigint> {
    return $.Struct.initList(8, $.Int64List, length, this);
  }
  setInt64List(value: $.List<bigint>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(8, this));
  }
  adoptUInt8List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(9, this));
  }
  disownUInt8List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getUInt8List());
  }
  getUInt8List(): $.List<number> {
    return $.Struct.getList(9, $.Uint8List, this, TestDefaults._capnp.defaultUInt8List);
  }
  hasUInt8List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(9, this));
  }
  initUInt8List(length: number): $.List<number> {
    return $.Struct.initList(9, $.Uint8List, length, this);
  }
  setUInt8List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(9, this));
  }
  adoptUInt16List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(10, this));
  }
  disownUInt16List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getUInt16List());
  }
  getUInt16List(): $.List<number> {
    return $.Struct.getList(10, $.Uint16List, this, TestDefaults._capnp.defaultUInt16List);
  }
  hasUInt16List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(10, this));
  }
  initUInt16List(length: number): $.List<number> {
    return $.Struct.initList(10, $.Uint16List, length, this);
  }
  setUInt16List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(10, this));
  }
  adoptUInt32List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(11, this));
  }
  disownUInt32List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getUInt32List());
  }
  getUInt32List(): $.List<number> {
    return $.Struct.getList(11, $.Uint32List, this, TestDefaults._capnp.defaultUInt32List);
  }
  hasUInt32List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(11, this));
  }
  initUInt32List(length: number): $.List<number> {
    return $.Struct.initList(11, $.Uint32List, length, this);
  }
  setUInt32List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(11, this));
  }
  adoptUInt64List(value: $.Orphan<$.List<bigint>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(12, this));
  }
  disownUInt64List(): $.Orphan<$.List<bigint>> {
    return $.Struct.disown(this.getUInt64List());
  }
  getUInt64List(): $.List<bigint> {
    return $.Struct.getList(12, $.Uint64List, this, TestDefaults._capnp.defaultUInt64List);
  }
  hasUInt64List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(12, this));
  }
  initUInt64List(length: number): $.List<bigint> {
    return $.Struct.initList(12, $.Uint64List, length, this);
  }
  setUInt64List(value: $.List<bigint>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(12, this));
  }
  adoptFloat32List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(13, this));
  }
  disownFloat32List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getFloat32List());
  }
  getFloat32List(): $.List<number> {
    return $.Struct.getList(13, $.Float32List, this, TestDefaults._capnp.defaultFloat32List);
  }
  hasFloat32List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(13, this));
  }
  initFloat32List(length: number): $.List<number> {
    return $.Struct.initList(13, $.Float32List, length, this);
  }
  setFloat32List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(13, this));
  }
  adoptFloat64List(value: $.Orphan<$.List<number>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(14, this));
  }
  disownFloat64List(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getFloat64List());
  }
  getFloat64List(): $.List<number> {
    return $.Struct.getList(14, $.Float64List, this, TestDefaults._capnp.defaultFloat64List);
  }
  hasFloat64List(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(14, this));
  }
  initFloat64List(length: number): $.List<number> {
    return $.Struct.initList(14, $.Float64List, length, this);
  }
  setFloat64List(value: $.List<number>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(14, this));
  }
  adoptTextList(value: $.Orphan<$.List<string>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(15, this));
  }
  disownTextList(): $.Orphan<$.List<string>> {
    return $.Struct.disown(this.getTextList());
  }
  getTextList(): $.List<string> {
    return $.Struct.getList(15, $.TextList, this, TestDefaults._capnp.defaultTextList);
  }
  hasTextList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(15, this));
  }
  initTextList(length: number): $.List<string> {
    return $.Struct.initList(15, $.TextList, length, this);
  }
  setTextList(value: $.List<string>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(15, this));
  }
  adoptDataList(value: $.Orphan<$.List<$.Data>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(16, this));
  }
  disownDataList(): $.Orphan<$.List<$.Data>> {
    return $.Struct.disown(this.getDataList());
  }
  getDataList(): $.List<$.Data> {
    return $.Struct.getList(16, $.DataList, this, TestDefaults._capnp.defaultDataList);
  }
  hasDataList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(16, this));
  }
  initDataList(length: number): $.List<$.Data> {
    return $.Struct.initList(16, $.DataList, length, this);
  }
  setDataList(value: $.List<$.Data>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(16, this));
  }
  adoptStructList(value: $.Orphan<$.List<TestAllTypes>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(17, this));
  }
  disownStructList(): $.Orphan<$.List<TestAllTypes>> {
    return $.Struct.disown(this.getStructList());
  }
  getStructList(): $.List<TestAllTypes> {
    return $.Struct.getList(17, TestDefaults._StructList, this, TestDefaults._capnp.defaultStructList);
  }
  hasStructList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(17, this));
  }
  initStructList(length: number): $.List<TestAllTypes> {
    return $.Struct.initList(17, TestDefaults._StructList, length, this);
  }
  setStructList(value: $.List<TestAllTypes>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(17, this));
  }
  adoptEnumList(value: $.Orphan<$.List<TestEnum>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(18, this));
  }
  disownEnumList(): $.Orphan<$.List<TestEnum>> {
    return $.Struct.disown(this.getEnumList());
  }
  getEnumList(): $.List<TestEnum> {
    return $.Struct.getList(18, $.Uint16List, this, TestDefaults._capnp.defaultEnumList) as $.List<TestEnum>;
  }
  hasEnumList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(18, this));
  }
  initEnumList(length: number): $.List<TestEnum> {
    return $.Struct.initList(18, $.Uint16List, length, this) as $.List<TestEnum>;
  }
  setEnumList(value: $.List<TestEnum>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(18, this));
  }
  adoptInterfaceList(value: $.Orphan<$.List<$.Void>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(19, this));
  }
  disownInterfaceList(): $.Orphan<$.List<$.Void>> {
    return $.Struct.disown(this.getInterfaceList());
  }
  getInterfaceList(): $.List<$.Void> {
    return $.Struct.getList(19, $.VoidList, this);
  }
  hasInterfaceList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(19, this));
  }
  initInterfaceList(length: number): $.List<$.Void> {
    return $.Struct.initList(19, $.VoidList, length, this);
  }
  setInterfaceList(value: $.List<$.Void>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(19, this));
  }
  toString(): string {
    return "TestDefaults_" + super.toString();
  }
}
export class TestAnyPointer extends $.Struct {
  static readonly _capnp = {
    displayName: "TestAnyPointer",
    id: "e3da5a2ccd28c0d8",
    size: new $.ObjectSize(0, 1)
  };
  adoptAnyPointerField(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownAnyPointerField(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyPointerField());
  }
  getAnyPointerField(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasAnyPointerField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setAnyPointerField(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestAnyPointer_" + super.toString();
  }
}
export class TestAnyOthers extends $.Struct {
  static readonly _capnp = {
    displayName: "TestAnyOthers",
    id: "f49850f63c2bfa59",
    size: new $.ObjectSize(0, 3)
  };
  adoptAnyStructField(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownAnyStructField(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyStructField());
  }
  getAnyStructField(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasAnyStructField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setAnyStructField(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptAnyListField(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownAnyListField(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyListField());
  }
  getAnyListField(): $.Pointer {
    return $.Struct.getPointer(1, this);
  }
  hasAnyListField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  setAnyListField(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptCapabilityField(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownCapabilityField(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getCapabilityField());
  }
  getCapabilityField(): $.Pointer {
    return $.Struct.getPointer(2, this);
  }
  hasCapabilityField(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  setCapabilityField(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  toString(): string {
    return "TestAnyOthers_" + super.toString();
  }
}
export class TestOutOfOrder extends $.Struct {
  static readonly _capnp = {
    displayName: "TestOutOfOrder",
    id: "a9d5f8efe770022b",
    size: new $.ObjectSize(0, 9)
  };
  getFoo(): string {
    return $.Struct.getText(3, this);
  }
  setFoo(value: string): void {
    $.Struct.setText(3, value, this);
  }
  getBar(): string {
    return $.Struct.getText(2, this);
  }
  setBar(value: string): void {
    $.Struct.setText(2, value, this);
  }
  getBaz(): string {
    return $.Struct.getText(8, this);
  }
  setBaz(value: string): void {
    $.Struct.setText(8, value, this);
  }
  getQux(): string {
    return $.Struct.getText(0, this);
  }
  setQux(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getQuux(): string {
    return $.Struct.getText(6, this);
  }
  setQuux(value: string): void {
    $.Struct.setText(6, value, this);
  }
  getCorge(): string {
    return $.Struct.getText(4, this);
  }
  setCorge(value: string): void {
    $.Struct.setText(4, value, this);
  }
  getGrault(): string {
    return $.Struct.getText(1, this);
  }
  setGrault(value: string): void {
    $.Struct.setText(1, value, this);
  }
  getGarply(): string {
    return $.Struct.getText(7, this);
  }
  setGarply(value: string): void {
    $.Struct.setText(7, value, this);
  }
  getWaldo(): string {
    return $.Struct.getText(5, this);
  }
  setWaldo(value: string): void {
    $.Struct.setText(5, value, this);
  }
  toString(): string {
    return "TestOutOfOrder_" + super.toString();
  }
}
export const TestUnion_Union0_Which = {
  U0F0S0: 0,
  U0F0S1: 1,
  U0F0S8: 2,
  U0F0S16: 3,
  U0F0S32: 4,
  U0F0S64: 5,
  U0F0SP: 6,
  U0F1S0: 7,
  U0F1S1: 8,
  U0F1S8: 9,
  U0F1S16: 10,
  U0F1S32: 11,
  U0F1S64: 12,
  U0F1SP: 13
} as const;
export type TestUnion_Union0_Which = (typeof TestUnion_Union0_Which)[keyof typeof TestUnion_Union0_Which];
export class TestUnion_Union0 extends $.Struct {
  static readonly U0F0S0 = TestUnion_Union0_Which.U0F0S0;
  static readonly U0F0S1 = TestUnion_Union0_Which.U0F0S1;
  static readonly U0F0S8 = TestUnion_Union0_Which.U0F0S8;
  static readonly U0F0S16 = TestUnion_Union0_Which.U0F0S16;
  static readonly U0F0S32 = TestUnion_Union0_Which.U0F0S32;
  static readonly U0F0S64 = TestUnion_Union0_Which.U0F0S64;
  static readonly U0F0SP = TestUnion_Union0_Which.U0F0SP;
  static readonly U0F1S0 = TestUnion_Union0_Which.U0F1S0;
  static readonly U0F1S1 = TestUnion_Union0_Which.U0F1S1;
  static readonly U0F1S8 = TestUnion_Union0_Which.U0F1S8;
  static readonly U0F1S16 = TestUnion_Union0_Which.U0F1S16;
  static readonly U0F1S32 = TestUnion_Union0_Which.U0F1S32;
  static readonly U0F1S64 = TestUnion_Union0_Which.U0F1S64;
  static readonly U0F1SP = TestUnion_Union0_Which.U0F1SP;
  static readonly _capnp = {
    displayName: "union0",
    id: "fc76a82eecb7a718",
    size: new $.ObjectSize(64, 2)
  };
  isU0f0s0(): boolean {
    return $.Struct.getUint16(0, this) === 0;
  }
  setU0f0s0(): void {
    $.Struct.setUint16(0, 0, this);
  }
  getU0f0s1(): boolean {
    $.Struct.testWhich("u0f0s1", $.Struct.getUint16(0, this), 1, this);
    return $.Struct.getBit(64, this);
  }
  isU0f0s1(): boolean {
    return $.Struct.getUint16(0, this) === 1;
  }
  setU0f0s1(value: boolean): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.setBit(64, value, this);
  }
  getU0f0s8(): number {
    $.Struct.testWhich("u0f0s8", $.Struct.getUint16(0, this), 2, this);
    return $.Struct.getInt8(8, this);
  }
  isU0f0s8(): boolean {
    return $.Struct.getUint16(0, this) === 2;
  }
  setU0f0s8(value: number): void {
    $.Struct.setUint16(0, 2, this);
    $.Struct.setInt8(8, value, this);
  }
  getU0f0s16(): number {
    $.Struct.testWhich("u0f0s16", $.Struct.getUint16(0, this), 3, this);
    return $.Struct.getInt16(8, this);
  }
  isU0f0s16(): boolean {
    return $.Struct.getUint16(0, this) === 3;
  }
  setU0f0s16(value: number): void {
    $.Struct.setUint16(0, 3, this);
    $.Struct.setInt16(8, value, this);
  }
  getU0f0s32(): number {
    $.Struct.testWhich("u0f0s32", $.Struct.getUint16(0, this), 4, this);
    return $.Struct.getInt32(8, this);
  }
  isU0f0s32(): boolean {
    return $.Struct.getUint16(0, this) === 4;
  }
  setU0f0s32(value: number): void {
    $.Struct.setUint16(0, 4, this);
    $.Struct.setInt32(8, value, this);
  }
  getU0f0s64(): bigint {
    $.Struct.testWhich("u0f0s64", $.Struct.getUint16(0, this), 5, this);
    return $.Struct.getInt64(8, this);
  }
  isU0f0s64(): boolean {
    return $.Struct.getUint16(0, this) === 5;
  }
  setU0f0s64(value: bigint): void {
    $.Struct.setUint16(0, 5, this);
    $.Struct.setInt64(8, value, this);
  }
  getU0f0sp(): string {
    $.Struct.testWhich("u0f0sp", $.Struct.getUint16(0, this), 6, this);
    return $.Struct.getText(0, this);
  }
  isU0f0sp(): boolean {
    return $.Struct.getUint16(0, this) === 6;
  }
  setU0f0sp(value: string): void {
    $.Struct.setUint16(0, 6, this);
    $.Struct.setText(0, value, this);
  }
  isU0f1s0(): boolean {
    return $.Struct.getUint16(0, this) === 7;
  }
  setU0f1s0(): void {
    $.Struct.setUint16(0, 7, this);
  }
  getU0f1s1(): boolean {
    $.Struct.testWhich("u0f1s1", $.Struct.getUint16(0, this), 8, this);
    return $.Struct.getBit(64, this);
  }
  isU0f1s1(): boolean {
    return $.Struct.getUint16(0, this) === 8;
  }
  setU0f1s1(value: boolean): void {
    $.Struct.setUint16(0, 8, this);
    $.Struct.setBit(64, value, this);
  }
  getU0f1s8(): number {
    $.Struct.testWhich("u0f1s8", $.Struct.getUint16(0, this), 9, this);
    return $.Struct.getInt8(8, this);
  }
  isU0f1s8(): boolean {
    return $.Struct.getUint16(0, this) === 9;
  }
  setU0f1s8(value: number): void {
    $.Struct.setUint16(0, 9, this);
    $.Struct.setInt8(8, value, this);
  }
  getU0f1s16(): number {
    $.Struct.testWhich("u0f1s16", $.Struct.getUint16(0, this), 10, this);
    return $.Struct.getInt16(8, this);
  }
  isU0f1s16(): boolean {
    return $.Struct.getUint16(0, this) === 10;
  }
  setU0f1s16(value: number): void {
    $.Struct.setUint16(0, 10, this);
    $.Struct.setInt16(8, value, this);
  }
  getU0f1s32(): number {
    $.Struct.testWhich("u0f1s32", $.Struct.getUint16(0, this), 11, this);
    return $.Struct.getInt32(8, this);
  }
  isU0f1s32(): boolean {
    return $.Struct.getUint16(0, this) === 11;
  }
  setU0f1s32(value: number): void {
    $.Struct.setUint16(0, 11, this);
    $.Struct.setInt32(8, value, this);
  }
  getU0f1s64(): bigint {
    $.Struct.testWhich("u0f1s64", $.Struct.getUint16(0, this), 12, this);
    return $.Struct.getInt64(8, this);
  }
  isU0f1s64(): boolean {
    return $.Struct.getUint16(0, this) === 12;
  }
  setU0f1s64(value: bigint): void {
    $.Struct.setUint16(0, 12, this);
    $.Struct.setInt64(8, value, this);
  }
  getU0f1sp(): string {
    $.Struct.testWhich("u0f1sp", $.Struct.getUint16(0, this), 13, this);
    return $.Struct.getText(0, this);
  }
  isU0f1sp(): boolean {
    return $.Struct.getUint16(0, this) === 13;
  }
  setU0f1sp(value: string): void {
    $.Struct.setUint16(0, 13, this);
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestUnion_Union0_" + super.toString();
  }
  which(): TestUnion_Union0_Which {
    return $.Struct.getUint16(0, this) as TestUnion_Union0_Which;
  }
}
export const TestUnion_Union1_Which = {
  U1F0S0: 0,
  U1F0S1: 1,
  U1F1S1: 2,
  U1F0S8: 3,
  U1F1S8: 4,
  U1F0S16: 5,
  U1F1S16: 6,
  U1F0S32: 7,
  U1F1S32: 8,
  U1F0S64: 9,
  U1F1S64: 10,
  U1F0SP: 11,
  U1F1SP: 12,
  U1F2S0: 13,
  U1F2S1: 14,
  U1F2S8: 15,
  U1F2S16: 16,
  U1F2S32: 17,
  U1F2S64: 18,
  U1F2SP: 19
} as const;
export type TestUnion_Union1_Which = (typeof TestUnion_Union1_Which)[keyof typeof TestUnion_Union1_Which];
export class TestUnion_Union1 extends $.Struct {
  static readonly U1F0S0 = TestUnion_Union1_Which.U1F0S0;
  static readonly U1F0S1 = TestUnion_Union1_Which.U1F0S1;
  static readonly U1F1S1 = TestUnion_Union1_Which.U1F1S1;
  static readonly U1F0S8 = TestUnion_Union1_Which.U1F0S8;
  static readonly U1F1S8 = TestUnion_Union1_Which.U1F1S8;
  static readonly U1F0S16 = TestUnion_Union1_Which.U1F0S16;
  static readonly U1F1S16 = TestUnion_Union1_Which.U1F1S16;
  static readonly U1F0S32 = TestUnion_Union1_Which.U1F0S32;
  static readonly U1F1S32 = TestUnion_Union1_Which.U1F1S32;
  static readonly U1F0S64 = TestUnion_Union1_Which.U1F0S64;
  static readonly U1F1S64 = TestUnion_Union1_Which.U1F1S64;
  static readonly U1F0SP = TestUnion_Union1_Which.U1F0SP;
  static readonly U1F1SP = TestUnion_Union1_Which.U1F1SP;
  static readonly U1F2S0 = TestUnion_Union1_Which.U1F2S0;
  static readonly U1F2S1 = TestUnion_Union1_Which.U1F2S1;
  static readonly U1F2S8 = TestUnion_Union1_Which.U1F2S8;
  static readonly U1F2S16 = TestUnion_Union1_Which.U1F2S16;
  static readonly U1F2S32 = TestUnion_Union1_Which.U1F2S32;
  static readonly U1F2S64 = TestUnion_Union1_Which.U1F2S64;
  static readonly U1F2SP = TestUnion_Union1_Which.U1F2SP;
  static readonly _capnp = {
    displayName: "union1",
    id: "ee0a6b99b7dc7ab2",
    size: new $.ObjectSize(64, 2)
  };
  isU1f0s0(): boolean {
    return $.Struct.getUint16(2, this) === 0;
  }
  setU1f0s0(): void {
    $.Struct.setUint16(2, 0, this);
  }
  getU1f0s1(): boolean {
    $.Struct.testWhich("u1f0s1", $.Struct.getUint16(2, this), 1, this);
    return $.Struct.getBit(129, this);
  }
  isU1f0s1(): boolean {
    return $.Struct.getUint16(2, this) === 1;
  }
  setU1f0s1(value: boolean): void {
    $.Struct.setUint16(2, 1, this);
    $.Struct.setBit(129, value, this);
  }
  getU1f1s1(): boolean {
    $.Struct.testWhich("u1f1s1", $.Struct.getUint16(2, this), 2, this);
    return $.Struct.getBit(129, this);
  }
  isU1f1s1(): boolean {
    return $.Struct.getUint16(2, this) === 2;
  }
  setU1f1s1(value: boolean): void {
    $.Struct.setUint16(2, 2, this);
    $.Struct.setBit(129, value, this);
  }
  getU1f0s8(): number {
    $.Struct.testWhich("u1f0s8", $.Struct.getUint16(2, this), 3, this);
    return $.Struct.getInt8(17, this);
  }
  isU1f0s8(): boolean {
    return $.Struct.getUint16(2, this) === 3;
  }
  setU1f0s8(value: number): void {
    $.Struct.setUint16(2, 3, this);
    $.Struct.setInt8(17, value, this);
  }
  getU1f1s8(): number {
    $.Struct.testWhich("u1f1s8", $.Struct.getUint16(2, this), 4, this);
    return $.Struct.getInt8(17, this);
  }
  isU1f1s8(): boolean {
    return $.Struct.getUint16(2, this) === 4;
  }
  setU1f1s8(value: number): void {
    $.Struct.setUint16(2, 4, this);
    $.Struct.setInt8(17, value, this);
  }
  getU1f0s16(): number {
    $.Struct.testWhich("u1f0s16", $.Struct.getUint16(2, this), 5, this);
    return $.Struct.getInt16(18, this);
  }
  isU1f0s16(): boolean {
    return $.Struct.getUint16(2, this) === 5;
  }
  setU1f0s16(value: number): void {
    $.Struct.setUint16(2, 5, this);
    $.Struct.setInt16(18, value, this);
  }
  getU1f1s16(): number {
    $.Struct.testWhich("u1f1s16", $.Struct.getUint16(2, this), 6, this);
    return $.Struct.getInt16(18, this);
  }
  isU1f1s16(): boolean {
    return $.Struct.getUint16(2, this) === 6;
  }
  setU1f1s16(value: number): void {
    $.Struct.setUint16(2, 6, this);
    $.Struct.setInt16(18, value, this);
  }
  getU1f0s32(): number {
    $.Struct.testWhich("u1f0s32", $.Struct.getUint16(2, this), 7, this);
    return $.Struct.getInt32(20, this);
  }
  isU1f0s32(): boolean {
    return $.Struct.getUint16(2, this) === 7;
  }
  setU1f0s32(value: number): void {
    $.Struct.setUint16(2, 7, this);
    $.Struct.setInt32(20, value, this);
  }
  getU1f1s32(): number {
    $.Struct.testWhich("u1f1s32", $.Struct.getUint16(2, this), 8, this);
    return $.Struct.getInt32(20, this);
  }
  isU1f1s32(): boolean {
    return $.Struct.getUint16(2, this) === 8;
  }
  setU1f1s32(value: number): void {
    $.Struct.setUint16(2, 8, this);
    $.Struct.setInt32(20, value, this);
  }
  getU1f0s64(): bigint {
    $.Struct.testWhich("u1f0s64", $.Struct.getUint16(2, this), 9, this);
    return $.Struct.getInt64(24, this);
  }
  isU1f0s64(): boolean {
    return $.Struct.getUint16(2, this) === 9;
  }
  setU1f0s64(value: bigint): void {
    $.Struct.setUint16(2, 9, this);
    $.Struct.setInt64(24, value, this);
  }
  getU1f1s64(): bigint {
    $.Struct.testWhich("u1f1s64", $.Struct.getUint16(2, this), 10, this);
    return $.Struct.getInt64(24, this);
  }
  isU1f1s64(): boolean {
    return $.Struct.getUint16(2, this) === 10;
  }
  setU1f1s64(value: bigint): void {
    $.Struct.setUint16(2, 10, this);
    $.Struct.setInt64(24, value, this);
  }
  getU1f0sp(): string {
    $.Struct.testWhich("u1f0sp", $.Struct.getUint16(2, this), 11, this);
    return $.Struct.getText(1, this);
  }
  isU1f0sp(): boolean {
    return $.Struct.getUint16(2, this) === 11;
  }
  setU1f0sp(value: string): void {
    $.Struct.setUint16(2, 11, this);
    $.Struct.setText(1, value, this);
  }
  getU1f1sp(): string {
    $.Struct.testWhich("u1f1sp", $.Struct.getUint16(2, this), 12, this);
    return $.Struct.getText(1, this);
  }
  isU1f1sp(): boolean {
    return $.Struct.getUint16(2, this) === 12;
  }
  setU1f1sp(value: string): void {
    $.Struct.setUint16(2, 12, this);
    $.Struct.setText(1, value, this);
  }
  isU1f2s0(): boolean {
    return $.Struct.getUint16(2, this) === 13;
  }
  setU1f2s0(): void {
    $.Struct.setUint16(2, 13, this);
  }
  getU1f2s1(): boolean {
    $.Struct.testWhich("u1f2s1", $.Struct.getUint16(2, this), 14, this);
    return $.Struct.getBit(129, this);
  }
  isU1f2s1(): boolean {
    return $.Struct.getUint16(2, this) === 14;
  }
  setU1f2s1(value: boolean): void {
    $.Struct.setUint16(2, 14, this);
    $.Struct.setBit(129, value, this);
  }
  getU1f2s8(): number {
    $.Struct.testWhich("u1f2s8", $.Struct.getUint16(2, this), 15, this);
    return $.Struct.getInt8(17, this);
  }
  isU1f2s8(): boolean {
    return $.Struct.getUint16(2, this) === 15;
  }
  setU1f2s8(value: number): void {
    $.Struct.setUint16(2, 15, this);
    $.Struct.setInt8(17, value, this);
  }
  getU1f2s16(): number {
    $.Struct.testWhich("u1f2s16", $.Struct.getUint16(2, this), 16, this);
    return $.Struct.getInt16(18, this);
  }
  isU1f2s16(): boolean {
    return $.Struct.getUint16(2, this) === 16;
  }
  setU1f2s16(value: number): void {
    $.Struct.setUint16(2, 16, this);
    $.Struct.setInt16(18, value, this);
  }
  getU1f2s32(): number {
    $.Struct.testWhich("u1f2s32", $.Struct.getUint16(2, this), 17, this);
    return $.Struct.getInt32(20, this);
  }
  isU1f2s32(): boolean {
    return $.Struct.getUint16(2, this) === 17;
  }
  setU1f2s32(value: number): void {
    $.Struct.setUint16(2, 17, this);
    $.Struct.setInt32(20, value, this);
  }
  getU1f2s64(): bigint {
    $.Struct.testWhich("u1f2s64", $.Struct.getUint16(2, this), 18, this);
    return $.Struct.getInt64(24, this);
  }
  isU1f2s64(): boolean {
    return $.Struct.getUint16(2, this) === 18;
  }
  setU1f2s64(value: bigint): void {
    $.Struct.setUint16(2, 18, this);
    $.Struct.setInt64(24, value, this);
  }
  getU1f2sp(): string {
    $.Struct.testWhich("u1f2sp", $.Struct.getUint16(2, this), 19, this);
    return $.Struct.getText(1, this);
  }
  isU1f2sp(): boolean {
    return $.Struct.getUint16(2, this) === 19;
  }
  setU1f2sp(value: string): void {
    $.Struct.setUint16(2, 19, this);
    $.Struct.setText(1, value, this);
  }
  toString(): string {
    return "TestUnion_Union1_" + super.toString();
  }
  which(): TestUnion_Union1_Which {
    return $.Struct.getUint16(2, this) as TestUnion_Union1_Which;
  }
}
export const TestUnion_Union2_Which = {
  U2F0S64: 0,
  U2F0S32: 1,
  U2F0S16: 2,
  U2F0S8: 3,
  U2F0S1: 4
} as const;
export type TestUnion_Union2_Which = (typeof TestUnion_Union2_Which)[keyof typeof TestUnion_Union2_Which];
export class TestUnion_Union2 extends $.Struct {
  static readonly U2F0S64 = TestUnion_Union2_Which.U2F0S64;
  static readonly U2F0S32 = TestUnion_Union2_Which.U2F0S32;
  static readonly U2F0S16 = TestUnion_Union2_Which.U2F0S16;
  static readonly U2F0S8 = TestUnion_Union2_Which.U2F0S8;
  static readonly U2F0S1 = TestUnion_Union2_Which.U2F0S1;
  static readonly _capnp = {
    displayName: "union2",
    id: "afc5fd419f0d66d4",
    size: new $.ObjectSize(64, 2)
  };
  getU2f0s64(): bigint {
    $.Struct.testWhich("u2f0s64", $.Struct.getUint16(4, this), 4, this);
    return $.Struct.getInt64(48, this);
  }
  isU2f0s64(): boolean {
    return $.Struct.getUint16(4, this) === 4;
  }
  setU2f0s64(value: bigint): void {
    $.Struct.setUint16(4, 4, this);
    $.Struct.setInt64(48, value, this);
  }
  getU2f0s32(): number {
    $.Struct.testWhich("u2f0s32", $.Struct.getUint16(4, this), 3, this);
    return $.Struct.getInt32(40, this);
  }
  isU2f0s32(): boolean {
    return $.Struct.getUint16(4, this) === 3;
  }
  setU2f0s32(value: number): void {
    $.Struct.setUint16(4, 3, this);
    $.Struct.setInt32(40, value, this);
  }
  getU2f0s16(): number {
    $.Struct.testWhich("u2f0s16", $.Struct.getUint16(4, this), 2, this);
    return $.Struct.getInt16(36, this);
  }
  isU2f0s16(): boolean {
    return $.Struct.getUint16(4, this) === 2;
  }
  setU2f0s16(value: number): void {
    $.Struct.setUint16(4, 2, this);
    $.Struct.setInt16(36, value, this);
  }
  getU2f0s8(): number {
    $.Struct.testWhich("u2f0s8", $.Struct.getUint16(4, this), 1, this);
    return $.Struct.getInt8(33, this);
  }
  isU2f0s8(): boolean {
    return $.Struct.getUint16(4, this) === 1;
  }
  setU2f0s8(value: number): void {
    $.Struct.setUint16(4, 1, this);
    $.Struct.setInt8(33, value, this);
  }
  getU2f0s1(): boolean {
    $.Struct.testWhich("u2f0s1", $.Struct.getUint16(4, this), 0, this);
    return $.Struct.getBit(256, this);
  }
  isU2f0s1(): boolean {
    return $.Struct.getUint16(4, this) === 0;
  }
  setU2f0s1(value: boolean): void {
    $.Struct.setUint16(4, 0, this);
    $.Struct.setBit(256, value, this);
  }
  toString(): string {
    return "TestUnion_Union2_" + super.toString();
  }
  which(): TestUnion_Union2_Which {
    return $.Struct.getUint16(4, this) as TestUnion_Union2_Which;
  }
}
export const TestUnion_Union3_Which = {
  U3F0S64: 0,
  U3F0S32: 1,
  U3F0S16: 2,
  U3F0S8: 3,
  U3F0S1: 4
} as const;
export type TestUnion_Union3_Which = (typeof TestUnion_Union3_Which)[keyof typeof TestUnion_Union3_Which];
export class TestUnion_Union3 extends $.Struct {
  static readonly U3F0S64 = TestUnion_Union3_Which.U3F0S64;
  static readonly U3F0S32 = TestUnion_Union3_Which.U3F0S32;
  static readonly U3F0S16 = TestUnion_Union3_Which.U3F0S16;
  static readonly U3F0S8 = TestUnion_Union3_Which.U3F0S8;
  static readonly U3F0S1 = TestUnion_Union3_Which.U3F0S1;
  static readonly _capnp = {
    displayName: "union3",
    id: "a2fb022ec7f30053",
    size: new $.ObjectSize(64, 2)
  };
  getU3f0s64(): bigint {
    $.Struct.testWhich("u3f0s64", $.Struct.getUint16(6, this), 4, this);
    return $.Struct.getInt64(56, this);
  }
  isU3f0s64(): boolean {
    return $.Struct.getUint16(6, this) === 4;
  }
  setU3f0s64(value: bigint): void {
    $.Struct.setUint16(6, 4, this);
    $.Struct.setInt64(56, value, this);
  }
  getU3f0s32(): number {
    $.Struct.testWhich("u3f0s32", $.Struct.getUint16(6, this), 3, this);
    return $.Struct.getInt32(44, this);
  }
  isU3f0s32(): boolean {
    return $.Struct.getUint16(6, this) === 3;
  }
  setU3f0s32(value: number): void {
    $.Struct.setUint16(6, 3, this);
    $.Struct.setInt32(44, value, this);
  }
  getU3f0s16(): number {
    $.Struct.testWhich("u3f0s16", $.Struct.getUint16(6, this), 2, this);
    return $.Struct.getInt16(38, this);
  }
  isU3f0s16(): boolean {
    return $.Struct.getUint16(6, this) === 2;
  }
  setU3f0s16(value: number): void {
    $.Struct.setUint16(6, 2, this);
    $.Struct.setInt16(38, value, this);
  }
  getU3f0s8(): number {
    $.Struct.testWhich("u3f0s8", $.Struct.getUint16(6, this), 1, this);
    return $.Struct.getInt8(34, this);
  }
  isU3f0s8(): boolean {
    return $.Struct.getUint16(6, this) === 1;
  }
  setU3f0s8(value: number): void {
    $.Struct.setUint16(6, 1, this);
    $.Struct.setInt8(34, value, this);
  }
  getU3f0s1(): boolean {
    $.Struct.testWhich("u3f0s1", $.Struct.getUint16(6, this), 0, this);
    return $.Struct.getBit(257, this);
  }
  isU3f0s1(): boolean {
    return $.Struct.getUint16(6, this) === 0;
  }
  setU3f0s1(value: boolean): void {
    $.Struct.setUint16(6, 0, this);
    $.Struct.setBit(257, value, this);
  }
  toString(): string {
    return "TestUnion_Union3_" + super.toString();
  }
  which(): TestUnion_Union3_Which {
    return $.Struct.getUint16(6, this) as TestUnion_Union3_Which;
  }
}
export class TestUnion extends $.Struct {
  static readonly _capnp = {
    displayName: "TestUnion",
    id: "f47697362233ce52",
    size: new $.ObjectSize(64, 2)
  };
  getUnion0(): TestUnion_Union0 {
    return $.Struct.getAs(TestUnion_Union0, this);
  }
  initUnion0(): TestUnion_Union0 {
    return $.Struct.getAs(TestUnion_Union0, this);
  }
  getBit0(): boolean {
    return $.Struct.getBit(128, this);
  }
  setBit0(value: boolean): void {
    $.Struct.setBit(128, value, this);
  }
  getUnion1(): TestUnion_Union1 {
    return $.Struct.getAs(TestUnion_Union1, this);
  }
  initUnion1(): TestUnion_Union1 {
    return $.Struct.getAs(TestUnion_Union1, this);
  }
  getBit2(): boolean {
    return $.Struct.getBit(130, this);
  }
  setBit2(value: boolean): void {
    $.Struct.setBit(130, value, this);
  }
  getBit3(): boolean {
    return $.Struct.getBit(131, this);
  }
  setBit3(value: boolean): void {
    $.Struct.setBit(131, value, this);
  }
  getBit4(): boolean {
    return $.Struct.getBit(132, this);
  }
  setBit4(value: boolean): void {
    $.Struct.setBit(132, value, this);
  }
  getBit5(): boolean {
    return $.Struct.getBit(133, this);
  }
  setBit5(value: boolean): void {
    $.Struct.setBit(133, value, this);
  }
  getBit6(): boolean {
    return $.Struct.getBit(134, this);
  }
  setBit6(value: boolean): void {
    $.Struct.setBit(134, value, this);
  }
  getBit7(): boolean {
    return $.Struct.getBit(135, this);
  }
  setBit7(value: boolean): void {
    $.Struct.setBit(135, value, this);
  }
  getUnion2(): TestUnion_Union2 {
    return $.Struct.getAs(TestUnion_Union2, this);
  }
  initUnion2(): TestUnion_Union2 {
    return $.Struct.getAs(TestUnion_Union2, this);
  }
  getUnion3(): TestUnion_Union3 {
    return $.Struct.getAs(TestUnion_Union3, this);
  }
  initUnion3(): TestUnion_Union3 {
    return $.Struct.getAs(TestUnion_Union3, this);
  }
  getByte0(): number {
    return $.Struct.getUint8(35, this);
  }
  setByte0(value: number): void {
    $.Struct.setUint8(35, value, this);
  }
  toString(): string {
    return "TestUnion_" + super.toString();
  }
}
export const TestUnnamedUnion_Which = {
  FOO: 0,
  BAR: 1
} as const;
export type TestUnnamedUnion_Which = (typeof TestUnnamedUnion_Which)[keyof typeof TestUnnamedUnion_Which];
export class TestUnnamedUnion extends $.Struct {
  static readonly FOO = TestUnnamedUnion_Which.FOO;
  static readonly BAR = TestUnnamedUnion_Which.BAR;
  static readonly _capnp = {
    displayName: "TestUnnamedUnion",
    id: "9e2e784c915329b6",
    size: new $.ObjectSize(16, 2)
  };
  getBefore(): string {
    return $.Struct.getText(0, this);
  }
  setBefore(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getFoo(): number {
    $.Struct.testWhich("foo", $.Struct.getUint16(4, this), 0, this);
    return $.Struct.getUint16(0, this);
  }
  isFoo(): boolean {
    return $.Struct.getUint16(4, this) === 0;
  }
  setFoo(value: number): void {
    $.Struct.setUint16(4, 0, this);
    $.Struct.setUint16(0, value, this);
  }
  getBar(): number {
    $.Struct.testWhich("bar", $.Struct.getUint16(4, this), 1, this);
    return $.Struct.getUint32(8, this);
  }
  isBar(): boolean {
    return $.Struct.getUint16(4, this) === 1;
  }
  setBar(value: number): void {
    $.Struct.setUint16(4, 1, this);
    $.Struct.setUint32(8, value, this);
  }
  getMiddle(): number {
    return $.Struct.getUint16(2, this);
  }
  setMiddle(value: number): void {
    $.Struct.setUint16(2, value, this);
  }
  getAfter(): string {
    return $.Struct.getText(1, this);
  }
  setAfter(value: string): void {
    $.Struct.setText(1, value, this);
  }
  toString(): string {
    return "TestUnnamedUnion_" + super.toString();
  }
  which(): TestUnnamedUnion_Which {
    return $.Struct.getUint16(4, this) as TestUnnamedUnion_Which;
  }
}
export const TestUnionInUnion_Outer_Inner_Which = {
  FOO: 0,
  BAR: 1
} as const;
export type TestUnionInUnion_Outer_Inner_Which = (typeof TestUnionInUnion_Outer_Inner_Which)[keyof typeof TestUnionInUnion_Outer_Inner_Which];
export class TestUnionInUnion_Outer_Inner extends $.Struct {
  static readonly FOO = TestUnionInUnion_Outer_Inner_Which.FOO;
  static readonly BAR = TestUnionInUnion_Outer_Inner_Which.BAR;
  static readonly _capnp = {
    displayName: "inner",
    id: "ff9ce111c6f8e5db",
    size: new $.ObjectSize(16, 0)
  };
  getFoo(): number {
    $.Struct.testWhich("foo", $.Struct.getUint16(4, this), 0, this);
    return $.Struct.getInt32(0, this);
  }
  isFoo(): boolean {
    return $.Struct.getUint16(4, this) === 0;
  }
  setFoo(value: number): void {
    $.Struct.setUint16(4, 0, this);
    $.Struct.setInt32(0, value, this);
  }
  getBar(): number {
    $.Struct.testWhich("bar", $.Struct.getUint16(4, this), 1, this);
    return $.Struct.getInt32(0, this);
  }
  isBar(): boolean {
    return $.Struct.getUint16(4, this) === 1;
  }
  setBar(value: number): void {
    $.Struct.setUint16(4, 1, this);
    $.Struct.setInt32(0, value, this);
  }
  toString(): string {
    return "TestUnionInUnion_Outer_Inner_" + super.toString();
  }
  which(): TestUnionInUnion_Outer_Inner_Which {
    return $.Struct.getUint16(4, this) as TestUnionInUnion_Outer_Inner_Which;
  }
}
export const TestUnionInUnion_Outer_Which = {
  INNER: 0,
  BAZ: 1
} as const;
export type TestUnionInUnion_Outer_Which = (typeof TestUnionInUnion_Outer_Which)[keyof typeof TestUnionInUnion_Outer_Which];
export class TestUnionInUnion_Outer extends $.Struct {
  static readonly INNER = TestUnionInUnion_Outer_Which.INNER;
  static readonly BAZ = TestUnionInUnion_Outer_Which.BAZ;
  static readonly _capnp = {
    displayName: "outer",
    id: "d005f6c63707670c",
    size: new $.ObjectSize(16, 0)
  };
  getInner(): TestUnionInUnion_Outer_Inner {
    $.Struct.testWhich("inner", $.Struct.getUint16(8, this), 0, this);
    return $.Struct.getAs(TestUnionInUnion_Outer_Inner, this);
  }
  initInner(): TestUnionInUnion_Outer_Inner {
    $.Struct.setUint16(8, 0, this);
    return $.Struct.getAs(TestUnionInUnion_Outer_Inner, this);
  }
  isInner(): boolean {
    return $.Struct.getUint16(8, this) === 0;
  }
  setInner(): void {
    $.Struct.setUint16(8, 0, this);
  }
  getBaz(): number {
    $.Struct.testWhich("baz", $.Struct.getUint16(8, this), 1, this);
    return $.Struct.getInt32(0, this);
  }
  isBaz(): boolean {
    return $.Struct.getUint16(8, this) === 1;
  }
  setBaz(value: number): void {
    $.Struct.setUint16(8, 1, this);
    $.Struct.setInt32(0, value, this);
  }
  toString(): string {
    return "TestUnionInUnion_Outer_" + super.toString();
  }
  which(): TestUnionInUnion_Outer_Which {
    return $.Struct.getUint16(8, this) as TestUnionInUnion_Outer_Which;
  }
}
export class TestUnionInUnion extends $.Struct {
  static readonly _capnp = {
    displayName: "TestUnionInUnion",
    id: "89a9494f1b900f22",
    size: new $.ObjectSize(16, 0)
  };
  getOuter(): TestUnionInUnion_Outer {
    return $.Struct.getAs(TestUnionInUnion_Outer, this);
  }
  initOuter(): TestUnionInUnion_Outer {
    return $.Struct.getAs(TestUnionInUnion_Outer, this);
  }
  toString(): string {
    return "TestUnionInUnion_" + super.toString();
  }
}
export class TestGroups_Groups_Foo extends $.Struct {
  static readonly _capnp = {
    displayName: "foo",
    id: "f5fcba89c0c1196f",
    size: new $.ObjectSize(16, 2)
  };
  getCorge(): number {
    return $.Struct.getInt32(0, this);
  }
  setCorge(value: number): void {
    $.Struct.setInt32(0, value, this);
  }
  getGrault(): bigint {
    return $.Struct.getInt64(8, this);
  }
  setGrault(value: bigint): void {
    $.Struct.setInt64(8, value, this);
  }
  getGarply(): string {
    return $.Struct.getText(0, this);
  }
  setGarply(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestGroups_Groups_Foo_" + super.toString();
  }
}
export class TestGroups_Groups_Baz extends $.Struct {
  static readonly _capnp = {
    displayName: "baz",
    id: "f0fa30304066a4b3",
    size: new $.ObjectSize(16, 2)
  };
  getCorge(): number {
    return $.Struct.getInt32(0, this);
  }
  setCorge(value: number): void {
    $.Struct.setInt32(0, value, this);
  }
  getGrault(): string {
    return $.Struct.getText(0, this);
  }
  setGrault(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getGarply(): string {
    return $.Struct.getText(1, this);
  }
  setGarply(value: string): void {
    $.Struct.setText(1, value, this);
  }
  toString(): string {
    return "TestGroups_Groups_Baz_" + super.toString();
  }
}
export class TestGroups_Groups_Bar extends $.Struct {
  static readonly _capnp = {
    displayName: "bar",
    id: "b727c0d0091a001d",
    size: new $.ObjectSize(16, 2)
  };
  getCorge(): number {
    return $.Struct.getInt32(0, this);
  }
  setCorge(value: number): void {
    $.Struct.setInt32(0, value, this);
  }
  getGrault(): string {
    return $.Struct.getText(0, this);
  }
  setGrault(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getGarply(): bigint {
    return $.Struct.getInt64(8, this);
  }
  setGarply(value: bigint): void {
    $.Struct.setInt64(8, value, this);
  }
  toString(): string {
    return "TestGroups_Groups_Bar_" + super.toString();
  }
}
export const TestGroups_Groups_Which = {
  FOO: 0,
  BAR: 1,
  BAZ: 2
} as const;
export type TestGroups_Groups_Which = (typeof TestGroups_Groups_Which)[keyof typeof TestGroups_Groups_Which];
export class TestGroups_Groups extends $.Struct {
  static readonly FOO = TestGroups_Groups_Which.FOO;
  static readonly BAR = TestGroups_Groups_Which.BAR;
  static readonly BAZ = TestGroups_Groups_Which.BAZ;
  static readonly _capnp = {
    displayName: "groups",
    id: "e22ae74ff9113268",
    size: new $.ObjectSize(16, 2)
  };
  getFoo(): TestGroups_Groups_Foo {
    $.Struct.testWhich("foo", $.Struct.getUint16(4, this), 0, this);
    return $.Struct.getAs(TestGroups_Groups_Foo, this);
  }
  initFoo(): TestGroups_Groups_Foo {
    $.Struct.setUint16(4, 0, this);
    return $.Struct.getAs(TestGroups_Groups_Foo, this);
  }
  isFoo(): boolean {
    return $.Struct.getUint16(4, this) === 0;
  }
  setFoo(): void {
    $.Struct.setUint16(4, 0, this);
  }
  getBar(): TestGroups_Groups_Bar {
    $.Struct.testWhich("bar", $.Struct.getUint16(4, this), 2, this);
    return $.Struct.getAs(TestGroups_Groups_Bar, this);
  }
  initBar(): TestGroups_Groups_Bar {
    $.Struct.setUint16(4, 2, this);
    return $.Struct.getAs(TestGroups_Groups_Bar, this);
  }
  isBar(): boolean {
    return $.Struct.getUint16(4, this) === 2;
  }
  setBar(): void {
    $.Struct.setUint16(4, 2, this);
  }
  getBaz(): TestGroups_Groups_Baz {
    $.Struct.testWhich("baz", $.Struct.getUint16(4, this), 1, this);
    return $.Struct.getAs(TestGroups_Groups_Baz, this);
  }
  initBaz(): TestGroups_Groups_Baz {
    $.Struct.setUint16(4, 1, this);
    return $.Struct.getAs(TestGroups_Groups_Baz, this);
  }
  isBaz(): boolean {
    return $.Struct.getUint16(4, this) === 1;
  }
  setBaz(): void {
    $.Struct.setUint16(4, 1, this);
  }
  toString(): string {
    return "TestGroups_Groups_" + super.toString();
  }
  which(): TestGroups_Groups_Which {
    return $.Struct.getUint16(4, this) as TestGroups_Groups_Which;
  }
}
export class TestGroups extends $.Struct {
  static readonly _capnp = {
    displayName: "TestGroups",
    id: "dc841556134c3103",
    size: new $.ObjectSize(16, 2)
  };
  getGroups(): TestGroups_Groups {
    return $.Struct.getAs(TestGroups_Groups, this);
  }
  initGroups(): TestGroups_Groups {
    return $.Struct.getAs(TestGroups_Groups, this);
  }
  toString(): string {
    return "TestGroups_" + super.toString();
  }
}
export class TestInterleavedGroups_Group1_Corge extends $.Struct {
  static readonly _capnp = {
    displayName: "corge",
    id: "db0afd413f4a313a",
    size: new $.ObjectSize(48, 6)
  };
  getGrault(): bigint {
    return $.Struct.getUint64(32, this);
  }
  setGrault(value: bigint): void {
    $.Struct.setUint64(32, value, this);
  }
  getGarply(): number {
    return $.Struct.getUint16(24, this);
  }
  setGarply(value: number): void {
    $.Struct.setUint16(24, value, this);
  }
  getPlugh(): string {
    return $.Struct.getText(2, this);
  }
  setPlugh(value: string): void {
    $.Struct.setText(2, value, this);
  }
  getXyzzy(): string {
    return $.Struct.getText(4, this);
  }
  setXyzzy(value: string): void {
    $.Struct.setText(4, value, this);
  }
  toString(): string {
    return "TestInterleavedGroups_Group1_Corge_" + super.toString();
  }
}
export const TestInterleavedGroups_Group1_Which = {
  QUX: 0,
  CORGE: 1,
  FRED: 2
} as const;
export type TestInterleavedGroups_Group1_Which = (typeof TestInterleavedGroups_Group1_Which)[keyof typeof TestInterleavedGroups_Group1_Which];
export class TestInterleavedGroups_Group1 extends $.Struct {
  static readonly QUX = TestInterleavedGroups_Group1_Which.QUX;
  static readonly CORGE = TestInterleavedGroups_Group1_Which.CORGE;
  static readonly FRED = TestInterleavedGroups_Group1_Which.FRED;
  static readonly _capnp = {
    displayName: "group1",
    id: "c7485a3516c7d3c8",
    size: new $.ObjectSize(48, 6)
  };
  getFoo(): number {
    return $.Struct.getUint32(0, this);
  }
  setFoo(value: number): void {
    $.Struct.setUint32(0, value, this);
  }
  getBar(): bigint {
    return $.Struct.getUint64(8, this);
  }
  setBar(value: bigint): void {
    $.Struct.setUint64(8, value, this);
  }
  getQux(): number {
    $.Struct.testWhich("qux", $.Struct.getUint16(28, this), 0, this);
    return $.Struct.getUint16(24, this);
  }
  isQux(): boolean {
    return $.Struct.getUint16(28, this) === 0;
  }
  setQux(value: number): void {
    $.Struct.setUint16(28, 0, this);
    $.Struct.setUint16(24, value, this);
  }
  getCorge(): TestInterleavedGroups_Group1_Corge {
    $.Struct.testWhich("corge", $.Struct.getUint16(28, this), 1, this);
    return $.Struct.getAs(TestInterleavedGroups_Group1_Corge, this);
  }
  initCorge(): TestInterleavedGroups_Group1_Corge {
    $.Struct.setUint16(28, 1, this);
    return $.Struct.getAs(TestInterleavedGroups_Group1_Corge, this);
  }
  isCorge(): boolean {
    return $.Struct.getUint16(28, this) === 1;
  }
  setCorge(): void {
    $.Struct.setUint16(28, 1, this);
  }
  getFred(): string {
    $.Struct.testWhich("fred", $.Struct.getUint16(28, this), 2, this);
    return $.Struct.getText(2, this);
  }
  isFred(): boolean {
    return $.Struct.getUint16(28, this) === 2;
  }
  setFred(value: string): void {
    $.Struct.setUint16(28, 2, this);
    $.Struct.setText(2, value, this);
  }
  getWaldo(): string {
    return $.Struct.getText(0, this);
  }
  setWaldo(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestInterleavedGroups_Group1_" + super.toString();
  }
  which(): TestInterleavedGroups_Group1_Which {
    return $.Struct.getUint16(28, this) as TestInterleavedGroups_Group1_Which;
  }
}
export class TestInterleavedGroups_Group2_Corge extends $.Struct {
  static readonly _capnp = {
    displayName: "corge",
    id: "a017f0366827ee37",
    size: new $.ObjectSize(48, 6)
  };
  getGrault(): bigint {
    return $.Struct.getUint64(40, this);
  }
  setGrault(value: bigint): void {
    $.Struct.setUint64(40, value, this);
  }
  getGarply(): number {
    return $.Struct.getUint16(26, this);
  }
  setGarply(value: number): void {
    $.Struct.setUint16(26, value, this);
  }
  getPlugh(): string {
    return $.Struct.getText(3, this);
  }
  setPlugh(value: string): void {
    $.Struct.setText(3, value, this);
  }
  getXyzzy(): string {
    return $.Struct.getText(5, this);
  }
  setXyzzy(value: string): void {
    $.Struct.setText(5, value, this);
  }
  toString(): string {
    return "TestInterleavedGroups_Group2_Corge_" + super.toString();
  }
}
export const TestInterleavedGroups_Group2_Which = {
  QUX: 0,
  CORGE: 1,
  FRED: 2
} as const;
export type TestInterleavedGroups_Group2_Which = (typeof TestInterleavedGroups_Group2_Which)[keyof typeof TestInterleavedGroups_Group2_Which];
export class TestInterleavedGroups_Group2 extends $.Struct {
  static readonly QUX = TestInterleavedGroups_Group2_Which.QUX;
  static readonly CORGE = TestInterleavedGroups_Group2_Which.CORGE;
  static readonly FRED = TestInterleavedGroups_Group2_Which.FRED;
  static readonly _capnp = {
    displayName: "group2",
    id: "cc85a335569990e9",
    size: new $.ObjectSize(48, 6)
  };
  getFoo(): number {
    return $.Struct.getUint32(4, this);
  }
  setFoo(value: number): void {
    $.Struct.setUint32(4, value, this);
  }
  getBar(): bigint {
    return $.Struct.getUint64(16, this);
  }
  setBar(value: bigint): void {
    $.Struct.setUint64(16, value, this);
  }
  getQux(): number {
    $.Struct.testWhich("qux", $.Struct.getUint16(30, this), 0, this);
    return $.Struct.getUint16(26, this);
  }
  isQux(): boolean {
    return $.Struct.getUint16(30, this) === 0;
  }
  setQux(value: number): void {
    $.Struct.setUint16(30, 0, this);
    $.Struct.setUint16(26, value, this);
  }
  getCorge(): TestInterleavedGroups_Group2_Corge {
    $.Struct.testWhich("corge", $.Struct.getUint16(30, this), 1, this);
    return $.Struct.getAs(TestInterleavedGroups_Group2_Corge, this);
  }
  initCorge(): TestInterleavedGroups_Group2_Corge {
    $.Struct.setUint16(30, 1, this);
    return $.Struct.getAs(TestInterleavedGroups_Group2_Corge, this);
  }
  isCorge(): boolean {
    return $.Struct.getUint16(30, this) === 1;
  }
  setCorge(): void {
    $.Struct.setUint16(30, 1, this);
  }
  getFred(): string {
    $.Struct.testWhich("fred", $.Struct.getUint16(30, this), 2, this);
    return $.Struct.getText(3, this);
  }
  isFred(): boolean {
    return $.Struct.getUint16(30, this) === 2;
  }
  setFred(value: string): void {
    $.Struct.setUint16(30, 2, this);
    $.Struct.setText(3, value, this);
  }
  getWaldo(): string {
    return $.Struct.getText(1, this);
  }
  setWaldo(value: string): void {
    $.Struct.setText(1, value, this);
  }
  toString(): string {
    return "TestInterleavedGroups_Group2_" + super.toString();
  }
  which(): TestInterleavedGroups_Group2_Which {
    return $.Struct.getUint16(30, this) as TestInterleavedGroups_Group2_Which;
  }
}
export class TestInterleavedGroups extends $.Struct {
  static readonly _capnp = {
    displayName: "TestInterleavedGroups",
    id: "f77ed6f7454eec40",
    size: new $.ObjectSize(48, 6)
  };
  getGroup1(): TestInterleavedGroups_Group1 {
    return $.Struct.getAs(TestInterleavedGroups_Group1, this);
  }
  initGroup1(): TestInterleavedGroups_Group1 {
    return $.Struct.getAs(TestInterleavedGroups_Group1, this);
  }
  getGroup2(): TestInterleavedGroups_Group2 {
    return $.Struct.getAs(TestInterleavedGroups_Group2, this);
  }
  initGroup2(): TestInterleavedGroups_Group2 {
    return $.Struct.getAs(TestInterleavedGroups_Group2, this);
  }
  toString(): string {
    return "TestInterleavedGroups_" + super.toString();
  }
}
export class TestUnionDefaults extends $.Struct {
  static readonly _capnp = {
    displayName: "TestUnionDefaults",
    id: "94f7e0b103b4b718",
    size: new $.ObjectSize(0, 4),
    defaultS16s8s64s8Set: $.readRawPointer(new Uint8Array([0x10, 0x0b, 0x50, 0x08, 0x02, 0x55, 0x03, 0x03, 0x04, 0x01, 0x03, 0x41, 0x01, 0x02, 0x7b, 0x00, 0x00, 0x04, 0x37, 0x00, 0x00, 0x7f, 0x87, 0x4b, 0x6b, 0x5d, 0x54, 0xdc, 0x2b, 0x00, 0x02]).buffer),
    defaultS0sps1s32Set: $.readRawPointer(new Uint8Array([0x10, 0x0c, 0x50, 0x08, 0x02, 0x45, 0x07, 0x0b, 0x03, 0x00, 0x02, 0x01, 0x01, 0x70, 0x4e, 0x61, 0xbc, 0x00, 0x02, 0x11, 0x01, 0x22, 0x07, 0x66, 0x6f, 0x6f]).buffer),
    defaultUnnamed1: $.readRawPointer(new Uint8Array([0x10, 0x05, 0x50, 0x02, 0x02, 0x01, 0x7b, 0x00, 0x02]).buffer),
    defaultUnnamed2: $.readRawPointer(new Uint8Array([0x10, 0x07, 0x50, 0x02, 0x02, 0x10, 0x01, 0x03, 0x41, 0x01, 0x11, 0x05, 0x22, 0x11, 0x05, 0x22, 0x07, 0x66, 0x6f, 0x6f, 0x07, 0x62, 0x61, 0x72]).buffer)
  };
  adoptS16s8s64s8Set(value: $.Orphan<TestUnion>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownS16s8s64s8Set(): $.Orphan<TestUnion> {
    return $.Struct.disown(this.getS16s8s64s8Set());
  }
  getS16s8s64s8Set(): TestUnion {
    return $.Struct.getStruct(0, TestUnion, this, TestUnionDefaults._capnp.defaultS16s8s64s8Set);
  }
  hasS16s8s64s8Set(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initS16s8s64s8Set(): TestUnion {
    return $.Struct.initStructAt(0, TestUnion, this);
  }
  setS16s8s64s8Set(value: TestUnion): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptS0sps1s32Set(value: $.Orphan<TestUnion>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownS0sps1s32Set(): $.Orphan<TestUnion> {
    return $.Struct.disown(this.getS0sps1s32Set());
  }
  getS0sps1s32Set(): TestUnion {
    return $.Struct.getStruct(1, TestUnion, this, TestUnionDefaults._capnp.defaultS0sps1s32Set);
  }
  hasS0sps1s32Set(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initS0sps1s32Set(): TestUnion {
    return $.Struct.initStructAt(1, TestUnion, this);
  }
  setS0sps1s32Set(value: TestUnion): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptUnnamed1(value: $.Orphan<TestUnnamedUnion>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownUnnamed1(): $.Orphan<TestUnnamedUnion> {
    return $.Struct.disown(this.getUnnamed1());
  }
  getUnnamed1(): TestUnnamedUnion {
    return $.Struct.getStruct(2, TestUnnamedUnion, this, TestUnionDefaults._capnp.defaultUnnamed1);
  }
  hasUnnamed1(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initUnnamed1(): TestUnnamedUnion {
    return $.Struct.initStructAt(2, TestUnnamedUnion, this);
  }
  setUnnamed1(value: TestUnnamedUnion): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptUnnamed2(value: $.Orphan<TestUnnamedUnion>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownUnnamed2(): $.Orphan<TestUnnamedUnion> {
    return $.Struct.disown(this.getUnnamed2());
  }
  getUnnamed2(): TestUnnamedUnion {
    return $.Struct.getStruct(3, TestUnnamedUnion, this, TestUnionDefaults._capnp.defaultUnnamed2);
  }
  hasUnnamed2(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initUnnamed2(): TestUnnamedUnion {
    return $.Struct.initStructAt(3, TestUnnamedUnion, this);
  }
  setUnnamed2(value: TestUnnamedUnion): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  toString(): string {
    return "TestUnionDefaults_" + super.toString();
  }
}
export const TestNestedTypes_NestedEnum = {
  FOO: 0,
  BAR: 1
} as const;
export type TestNestedTypes_NestedEnum = (typeof TestNestedTypes_NestedEnum)[keyof typeof TestNestedTypes_NestedEnum];
export const TestNestedTypes_NestedStruct_NestedEnum = {
  BAZ: 0,
  QUX: 1,
  QUUX: 2
} as const;
export type TestNestedTypes_NestedStruct_NestedEnum = (typeof TestNestedTypes_NestedStruct_NestedEnum)[keyof typeof TestNestedTypes_NestedStruct_NestedEnum];
export class TestNestedTypes_NestedStruct extends $.Struct {
  static readonly NestedEnum = TestNestedTypes_NestedStruct_NestedEnum;
  static readonly _capnp = {
    displayName: "NestedStruct",
    id: "82cd03a53b29d76b",
    size: new $.ObjectSize(8, 0),
    defaultOuterNestedEnum: $.getUint16Mask(1),
    defaultInnerNestedEnum: $.getUint16Mask(2)
  };
  getOuterNestedEnum(): TestNestedTypes_NestedEnum {
    return $.Struct.getUint16(0, this, TestNestedTypes_NestedStruct._capnp.defaultOuterNestedEnum) as TestNestedTypes_NestedEnum;
  }
  setOuterNestedEnum(value: TestNestedTypes_NestedEnum): void {
    $.Struct.setUint16(0, value, this, TestNestedTypes_NestedStruct._capnp.defaultOuterNestedEnum);
  }
  getInnerNestedEnum(): TestNestedTypes_NestedStruct_NestedEnum {
    return $.Struct.getUint16(2, this, TestNestedTypes_NestedStruct._capnp.defaultInnerNestedEnum) as TestNestedTypes_NestedStruct_NestedEnum;
  }
  setInnerNestedEnum(value: TestNestedTypes_NestedStruct_NestedEnum): void {
    $.Struct.setUint16(2, value, this, TestNestedTypes_NestedStruct._capnp.defaultInnerNestedEnum);
  }
  toString(): string {
    return "TestNestedTypes_NestedStruct_" + super.toString();
  }
}
export class TestNestedTypes extends $.Struct {
  static readonly NestedEnum = TestNestedTypes_NestedEnum;
  static readonly NestedStruct = TestNestedTypes_NestedStruct;
  static readonly _capnp = {
    displayName: "TestNestedTypes",
    id: "d9f2b5941a343bcd",
    size: new $.ObjectSize(8, 1),
    defaultOuterNestedEnum: $.getUint16Mask(1),
    defaultInnerNestedEnum: $.getUint16Mask(2)
  };
  adoptNestedStruct(value: $.Orphan<TestNestedTypes_NestedStruct>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownNestedStruct(): $.Orphan<TestNestedTypes_NestedStruct> {
    return $.Struct.disown(this.getNestedStruct());
  }
  getNestedStruct(): TestNestedTypes_NestedStruct {
    return $.Struct.getStruct(0, TestNestedTypes_NestedStruct, this);
  }
  hasNestedStruct(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initNestedStruct(): TestNestedTypes_NestedStruct {
    return $.Struct.initStructAt(0, TestNestedTypes_NestedStruct, this);
  }
  setNestedStruct(value: TestNestedTypes_NestedStruct): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  getOuterNestedEnum(): TestNestedTypes_NestedEnum {
    return $.Struct.getUint16(0, this, TestNestedTypes._capnp.defaultOuterNestedEnum) as TestNestedTypes_NestedEnum;
  }
  setOuterNestedEnum(value: TestNestedTypes_NestedEnum): void {
    $.Struct.setUint16(0, value, this, TestNestedTypes._capnp.defaultOuterNestedEnum);
  }
  getInnerNestedEnum(): TestNestedTypes_NestedStruct_NestedEnum {
    return $.Struct.getUint16(2, this, TestNestedTypes._capnp.defaultInnerNestedEnum) as TestNestedTypes_NestedStruct_NestedEnum;
  }
  setInnerNestedEnum(value: TestNestedTypes_NestedStruct_NestedEnum): void {
    $.Struct.setUint16(2, value, this, TestNestedTypes._capnp.defaultInnerNestedEnum);
  }
  toString(): string {
    return "TestNestedTypes_" + super.toString();
  }
}
export class TestUsing extends $.Struct {
  static readonly _capnp = {
    displayName: "TestUsing",
    id: "e78aac389e77b065",
    size: new $.ObjectSize(8, 0),
    defaultOuterNestedEnum: $.getUint16Mask(1),
    defaultInnerNestedEnum: $.getUint16Mask(2)
  };
  getOuterNestedEnum(): TestNestedTypes_NestedEnum {
    return $.Struct.getUint16(2, this, TestUsing._capnp.defaultOuterNestedEnum) as TestNestedTypes_NestedEnum;
  }
  setOuterNestedEnum(value: TestNestedTypes_NestedEnum): void {
    $.Struct.setUint16(2, value, this, TestUsing._capnp.defaultOuterNestedEnum);
  }
  getInnerNestedEnum(): TestNestedTypes_NestedStruct_NestedEnum {
    return $.Struct.getUint16(0, this, TestUsing._capnp.defaultInnerNestedEnum) as TestNestedTypes_NestedStruct_NestedEnum;
  }
  setInnerNestedEnum(value: TestNestedTypes_NestedStruct_NestedEnum): void {
    $.Struct.setUint16(0, value, this, TestUsing._capnp.defaultInnerNestedEnum);
  }
  toString(): string {
    return "TestUsing_" + super.toString();
  }
}
export class TestLists_Struct0 extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct0",
    id: "8412c03b75b2cfee",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestLists_Struct0_" + super.toString();
  }
}
export class TestLists_Struct1 extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct1",
    id: "e0fe5870b141ad69",
    size: new $.ObjectSize(8, 0)
  };
  getF(): boolean {
    return $.Struct.getBit(0, this);
  }
  setF(value: boolean): void {
    $.Struct.setBit(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct1_" + super.toString();
  }
}
export class TestLists_Struct8 extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct8",
    id: "a6411a353090145b",
    size: new $.ObjectSize(8, 0)
  };
  getF(): number {
    return $.Struct.getUint8(0, this);
  }
  setF(value: number): void {
    $.Struct.setUint8(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct8_" + super.toString();
  }
}
export class TestLists_Struct16 extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct16",
    id: "a8abf7a82928986c",
    size: new $.ObjectSize(8, 0)
  };
  getF(): number {
    return $.Struct.getUint16(0, this);
  }
  setF(value: number): void {
    $.Struct.setUint16(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct16_" + super.toString();
  }
}
export class TestLists_Struct32 extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct32",
    id: "ad7beedc4ed30742",
    size: new $.ObjectSize(8, 0)
  };
  getF(): number {
    return $.Struct.getUint32(0, this);
  }
  setF(value: number): void {
    $.Struct.setUint32(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct32_" + super.toString();
  }
}
export class TestLists_Struct64 extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct64",
    id: "ef9a34f2ff7cc646",
    size: new $.ObjectSize(8, 0)
  };
  getF(): bigint {
    return $.Struct.getUint64(0, this);
  }
  setF(value: bigint): void {
    $.Struct.setUint64(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct64_" + super.toString();
  }
}
export class TestLists_StructP extends $.Struct {
  static readonly _capnp = {
    displayName: "StructP",
    id: "c6abf1b0329e6227",
    size: new $.ObjectSize(0, 1)
  };
  getF(): string {
    return $.Struct.getText(0, this);
  }
  setF(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_StructP_" + super.toString();
  }
}
export class TestLists_Struct0c extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct0c",
    id: "943a234ca336b16a",
    size: new $.ObjectSize(0, 1)
  };
  getPad(): string {
    return $.Struct.getText(0, this);
  }
  setPad(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct0c_" + super.toString();
  }
}
export class TestLists_Struct1c extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct1c",
    id: "8991bc0e74a594cd",
    size: new $.ObjectSize(8, 1)
  };
  getF(): boolean {
    return $.Struct.getBit(0, this);
  }
  setF(value: boolean): void {
    $.Struct.setBit(0, value, this);
  }
  getPad(): string {
    return $.Struct.getText(0, this);
  }
  setPad(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct1c_" + super.toString();
  }
}
export class TestLists_Struct8c extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct8c",
    id: "ed267416528c7a24",
    size: new $.ObjectSize(8, 1)
  };
  getF(): number {
    return $.Struct.getUint8(0, this);
  }
  setF(value: number): void {
    $.Struct.setUint8(0, value, this);
  }
  getPad(): string {
    return $.Struct.getText(0, this);
  }
  setPad(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct8c_" + super.toString();
  }
}
export class TestLists_Struct16c extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct16c",
    id: "9978837b037d58e6",
    size: new $.ObjectSize(8, 1)
  };
  getF(): number {
    return $.Struct.getUint16(0, this);
  }
  setF(value: number): void {
    $.Struct.setUint16(0, value, this);
  }
  getPad(): string {
    return $.Struct.getText(0, this);
  }
  setPad(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct16c_" + super.toString();
  }
}
export class TestLists_Struct32c extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct32c",
    id: "ed5fa940f54a7904",
    size: new $.ObjectSize(8, 1)
  };
  getF(): number {
    return $.Struct.getUint32(0, this);
  }
  setF(value: number): void {
    $.Struct.setUint32(0, value, this);
  }
  getPad(): string {
    return $.Struct.getText(0, this);
  }
  setPad(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct32c_" + super.toString();
  }
}
export class TestLists_Struct64c extends $.Struct {
  static readonly _capnp = {
    displayName: "Struct64c",
    id: "bc743778f2597c7d",
    size: new $.ObjectSize(8, 1)
  };
  getF(): bigint {
    return $.Struct.getUint64(0, this);
  }
  setF(value: bigint): void {
    $.Struct.setUint64(0, value, this);
  }
  getPad(): string {
    return $.Struct.getText(0, this);
  }
  setPad(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestLists_Struct64c_" + super.toString();
  }
}
export class TestLists_StructPc extends $.Struct {
  static readonly _capnp = {
    displayName: "StructPc",
    id: "c2e364a40182013d",
    size: new $.ObjectSize(8, 1)
  };
  getF(): string {
    return $.Struct.getText(0, this);
  }
  setF(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getPad(): bigint {
    return $.Struct.getUint64(0, this);
  }
  setPad(value: bigint): void {
    $.Struct.setUint64(0, value, this);
  }
  toString(): string {
    return "TestLists_StructPc_" + super.toString();
  }
}
export class TestLists extends $.Struct {
  static readonly Struct0 = TestLists_Struct0;
  static readonly Struct1 = TestLists_Struct1;
  static readonly Struct8 = TestLists_Struct8;
  static readonly Struct16 = TestLists_Struct16;
  static readonly Struct32 = TestLists_Struct32;
  static readonly Struct64 = TestLists_Struct64;
  static readonly StructP = TestLists_StructP;
  static readonly Struct0c = TestLists_Struct0c;
  static readonly Struct1c = TestLists_Struct1c;
  static readonly Struct8c = TestLists_Struct8c;
  static readonly Struct16c = TestLists_Struct16c;
  static readonly Struct32c = TestLists_Struct32c;
  static readonly Struct64c = TestLists_Struct64c;
  static readonly StructPc = TestLists_StructPc;
  static readonly _capnp = {
    displayName: "TestLists",
    id: "e41885c94393277e",
    size: new $.ObjectSize(0, 10)
  };
  static _List0: $.ListCtor<TestLists_Struct0>;
  static _List1: $.ListCtor<TestLists_Struct1>;
  static _List8: $.ListCtor<TestLists_Struct8>;
  static _List16: $.ListCtor<TestLists_Struct16>;
  static _List32: $.ListCtor<TestLists_Struct32>;
  static _List64: $.ListCtor<TestLists_Struct64>;
  static _ListP: $.ListCtor<TestLists_StructP>;
  static _Int32ListList: $.ListCtor<$.List<number>>;
  static _TextListList: $.ListCtor<$.List<string>>;
  static _StructListList: $.ListCtor<$.List<TestAllTypes>>;
  adoptList0(value: $.Orphan<$.List<TestLists_Struct0>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownList0(): $.Orphan<$.List<TestLists_Struct0>> {
    return $.Struct.disown(this.getList0());
  }
  getList0(): $.List<TestLists_Struct0> {
    return $.Struct.getList(0, TestLists._List0, this);
  }
  hasList0(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initList0(length: number): $.List<TestLists_Struct0> {
    return $.Struct.initList(0, TestLists._List0, length, this);
  }
  setList0(value: $.List<TestLists_Struct0>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptList1(value: $.Orphan<$.List<TestLists_Struct1>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownList1(): $.Orphan<$.List<TestLists_Struct1>> {
    return $.Struct.disown(this.getList1());
  }
  getList1(): $.List<TestLists_Struct1> {
    return $.Struct.getList(1, TestLists._List1, this);
  }
  hasList1(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initList1(length: number): $.List<TestLists_Struct1> {
    return $.Struct.initList(1, TestLists._List1, length, this);
  }
  setList1(value: $.List<TestLists_Struct1>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptList8(value: $.Orphan<$.List<TestLists_Struct8>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownList8(): $.Orphan<$.List<TestLists_Struct8>> {
    return $.Struct.disown(this.getList8());
  }
  getList8(): $.List<TestLists_Struct8> {
    return $.Struct.getList(2, TestLists._List8, this);
  }
  hasList8(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initList8(length: number): $.List<TestLists_Struct8> {
    return $.Struct.initList(2, TestLists._List8, length, this);
  }
  setList8(value: $.List<TestLists_Struct8>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptList16(value: $.Orphan<$.List<TestLists_Struct16>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownList16(): $.Orphan<$.List<TestLists_Struct16>> {
    return $.Struct.disown(this.getList16());
  }
  getList16(): $.List<TestLists_Struct16> {
    return $.Struct.getList(3, TestLists._List16, this);
  }
  hasList16(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initList16(length: number): $.List<TestLists_Struct16> {
    return $.Struct.initList(3, TestLists._List16, length, this);
  }
  setList16(value: $.List<TestLists_Struct16>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  adoptList32(value: $.Orphan<$.List<TestLists_Struct32>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(4, this));
  }
  disownList32(): $.Orphan<$.List<TestLists_Struct32>> {
    return $.Struct.disown(this.getList32());
  }
  getList32(): $.List<TestLists_Struct32> {
    return $.Struct.getList(4, TestLists._List32, this);
  }
  hasList32(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(4, this));
  }
  initList32(length: number): $.List<TestLists_Struct32> {
    return $.Struct.initList(4, TestLists._List32, length, this);
  }
  setList32(value: $.List<TestLists_Struct32>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(4, this));
  }
  adoptList64(value: $.Orphan<$.List<TestLists_Struct64>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(5, this));
  }
  disownList64(): $.Orphan<$.List<TestLists_Struct64>> {
    return $.Struct.disown(this.getList64());
  }
  getList64(): $.List<TestLists_Struct64> {
    return $.Struct.getList(5, TestLists._List64, this);
  }
  hasList64(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(5, this));
  }
  initList64(length: number): $.List<TestLists_Struct64> {
    return $.Struct.initList(5, TestLists._List64, length, this);
  }
  setList64(value: $.List<TestLists_Struct64>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(5, this));
  }
  adoptListP(value: $.Orphan<$.List<TestLists_StructP>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(6, this));
  }
  disownListP(): $.Orphan<$.List<TestLists_StructP>> {
    return $.Struct.disown(this.getListP());
  }
  getListP(): $.List<TestLists_StructP> {
    return $.Struct.getList(6, TestLists._ListP, this);
  }
  hasListP(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(6, this));
  }
  initListP(length: number): $.List<TestLists_StructP> {
    return $.Struct.initList(6, TestLists._ListP, length, this);
  }
  setListP(value: $.List<TestLists_StructP>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(6, this));
  }
  adoptInt32ListList(value: $.Orphan<$.List<$.List<number>>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(7, this));
  }
  disownInt32ListList(): $.Orphan<$.List<$.List<number>>> {
    return $.Struct.disown(this.getInt32ListList());
  }
  getInt32ListList(): $.List<$.List<number>> {
    return $.Struct.getList(7, TestLists._Int32ListList, this);
  }
  hasInt32ListList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(7, this));
  }
  initInt32ListList(length: number): $.List<$.List<number>> {
    return $.Struct.initList(7, TestLists._Int32ListList, length, this);
  }
  setInt32ListList(value: $.List<$.List<number>>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(7, this));
  }
  adoptTextListList(value: $.Orphan<$.List<$.List<string>>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(8, this));
  }
  disownTextListList(): $.Orphan<$.List<$.List<string>>> {
    return $.Struct.disown(this.getTextListList());
  }
  getTextListList(): $.List<$.List<string>> {
    return $.Struct.getList(8, TestLists._TextListList, this);
  }
  hasTextListList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(8, this));
  }
  initTextListList(length: number): $.List<$.List<string>> {
    return $.Struct.initList(8, TestLists._TextListList, length, this);
  }
  setTextListList(value: $.List<$.List<string>>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(8, this));
  }
  adoptStructListList(value: $.Orphan<$.List<$.List<TestAllTypes>>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(9, this));
  }
  disownStructListList(): $.Orphan<$.List<$.List<TestAllTypes>>> {
    return $.Struct.disown(this.getStructListList());
  }
  getStructListList(): $.List<$.List<TestAllTypes>> {
    return $.Struct.getList(9, TestLists._StructListList, this);
  }
  hasStructListList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(9, this));
  }
  initStructListList(length: number): $.List<$.List<TestAllTypes>> {
    return $.Struct.initList(9, TestLists._StructListList, length, this);
  }
  setStructListList(value: $.List<$.List<TestAllTypes>>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(9, this));
  }
  toString(): string {
    return "TestLists_" + super.toString();
  }
}
export class TestFieldZeroIsBit extends $.Struct {
  static readonly _capnp = {
    displayName: "TestFieldZeroIsBit",
    id: "92fc29a80f3ddd5c",
    size: new $.ObjectSize(8, 0),
    defaultSecondBit: $.getBitMask(true, 1),
    defaultThirdField: $.getUint8Mask(123)
  };
  getBit(): boolean {
    return $.Struct.getBit(0, this);
  }
  setBit(value: boolean): void {
    $.Struct.setBit(0, value, this);
  }
  getSecondBit(): boolean {
    return $.Struct.getBit(1, this, TestFieldZeroIsBit._capnp.defaultSecondBit);
  }
  setSecondBit(value: boolean): void {
    $.Struct.setBit(1, value, this, TestFieldZeroIsBit._capnp.defaultSecondBit);
  }
  getThirdField(): number {
    return $.Struct.getUint8(1, this, TestFieldZeroIsBit._capnp.defaultThirdField);
  }
  setThirdField(value: number): void {
    $.Struct.setUint8(1, value, this, TestFieldZeroIsBit._capnp.defaultThirdField);
  }
  toString(): string {
    return "TestFieldZeroIsBit_" + super.toString();
  }
}
export class TestListDefaults extends $.Struct {
  static readonly _capnp = {
    displayName: "TestListDefaults",
    id: "a851ad32cbc2ffea",
    size: new $.ObjectSize(0, 1),
    defaultLists: $.readRawPointer(new Uint8Array([0x10, 0x88, 0x40, 0x0a, 0x11, 0x25, 0x07, 0x11, 0x25, 0x27, 0x11, 0x35, 0x17, 0x11, 0x3d, 0x17, 0x11, 0x45, 0x17, 0x11, 0x4d, 0x17, 0x11, 0x55, 0x17, 0x11, 0x65, 0x1e, 0x11, 0x7d, 0x1e, 0x11, 0xad, 0x16, 0x01, 0x08, 0x11, 0x10, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x11, 0x08, 0x01, 0x01, 0x7b, 0x01, 0x2d, 0x11, 0x08, 0x01, 0x03, 0x39, 0x30, 0x03, 0x85, 0x1a, 0x11, 0x08, 0x01, 0x0f, 0x15, 0xcd, 0x5b, 0x07, 0x0f, 0xd2, 0x38, 0xfb, 0x0d, 0x11, 0x08, 0x01, 0x7f, 0xc0, 0xba, 0x8a, 0x3c, 0xd5, 0x62, 0x04, 0x7f, 0x87, 0x4b, 0xaa, 0xed, 0x61, 0x55, 0x08, 0x41, 0x08, 0x01, 0x11, 0x05, 0x22, 0x11, 0x05, 0x22, 0x07, 0x66, 0x6f, 0x6f, 0x07, 0x62, 0x61, 0x72, 0x11, 0x09, 0x1c, 0x11, 0x0d, 0x14, 0x11, 0x0d, 0x0c, 0x11, 0x01, 0x02, 0x01, 0x03, 0x11, 0x04, 0x05, 0x07, 0xf2, 0x4f, 0xbc, 0x11, 0x09, 0x16, 0x11, 0x15, 0x0e, 0x11, 0x19, 0x16, 0x11, 0x05, 0x22, 0x11, 0x05, 0x22, 0x07, 0x66, 0x6f, 0x6f, 0x07, 0x62, 0x61, 0x72, 0x11, 0x01, 0x22, 0x07, 0x62, 0x61, 0x7a, 0x11, 0x05, 0x22, 0x11, 0x05, 0x32, 0x07, 0x71, 0x75, 0x78, 0x1f, 0x63, 0x6f, 0x72, 0x67, 0x65, 0x31, 0x05, 0xa7, 0x01, 0x11, 0xd5, 0xd7, 0x51, 0x08, 0x06, 0x14, 0x10, 0x7b, 0x00, 0x18, 0x30, 0xc8, 0x01, 0x00, 0x18, 0x51, 0x04, 0x06, 0x14, 0x30, 0x15, 0x03, 0x00, 0x18]).buffer)
  };
  adoptLists(value: $.Orphan<TestLists>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownLists(): $.Orphan<TestLists> {
    return $.Struct.disown(this.getLists());
  }
  getLists(): TestLists {
    return $.Struct.getStruct(0, TestLists, this, TestListDefaults._capnp.defaultLists);
  }
  hasLists(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initLists(): TestLists {
    return $.Struct.initStructAt(0, TestLists, this);
  }
  setLists(value: TestLists): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestListDefaults_" + super.toString();
  }
}
export const TestLateUnion_TheUnion_Which = {
  QUX: 0,
  CORGE: 1,
  GRAULT: 2
} as const;
export type TestLateUnion_TheUnion_Which = (typeof TestLateUnion_TheUnion_Which)[keyof typeof TestLateUnion_TheUnion_Which];
export class TestLateUnion_TheUnion extends $.Struct {
  static readonly QUX = TestLateUnion_TheUnion_Which.QUX;
  static readonly CORGE = TestLateUnion_TheUnion_Which.CORGE;
  static readonly GRAULT = TestLateUnion_TheUnion_Which.GRAULT;
  static readonly _capnp = {
    displayName: "theUnion",
    id: "807280a2901aa079",
    size: new $.ObjectSize(24, 3)
  };
  getQux(): string {
    $.Struct.testWhich("qux", $.Struct.getUint16(6, this), 0, this);
    return $.Struct.getText(1, this);
  }
  isQux(): boolean {
    return $.Struct.getUint16(6, this) === 0;
  }
  setQux(value: string): void {
    $.Struct.setUint16(6, 0, this);
    $.Struct.setText(1, value, this);
  }
  adoptCorge(value: $.Orphan<$.List<number>>): void {
    $.Struct.setUint16(6, 1, this);
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownCorge(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getCorge());
  }
  getCorge(): $.List<number> {
    $.Struct.testWhich("corge", $.Struct.getUint16(6, this), 1, this);
    return $.Struct.getList(1, $.Int32List, this);
  }
  hasCorge(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initCorge(length: number): $.List<number> {
    $.Struct.setUint16(6, 1, this);
    return $.Struct.initList(1, $.Int32List, length, this);
  }
  isCorge(): boolean {
    return $.Struct.getUint16(6, this) === 1;
  }
  setCorge(value: $.List<number>): void {
    $.Struct.setUint16(6, 1, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  getGrault(): number {
    $.Struct.testWhich("grault", $.Struct.getUint16(6, this), 2, this);
    return $.Struct.getFloat32(8, this);
  }
  isGrault(): boolean {
    return $.Struct.getUint16(6, this) === 2;
  }
  setGrault(value: number): void {
    $.Struct.setUint16(6, 2, this);
    $.Struct.setFloat32(8, value, this);
  }
  toString(): string {
    return "TestLateUnion_TheUnion_" + super.toString();
  }
  which(): TestLateUnion_TheUnion_Which {
    return $.Struct.getUint16(6, this) as TestLateUnion_TheUnion_Which;
  }
}
export const TestLateUnion_AnotherUnion_Which = {
  QUX: 0,
  CORGE: 1,
  GRAULT: 2
} as const;
export type TestLateUnion_AnotherUnion_Which = (typeof TestLateUnion_AnotherUnion_Which)[keyof typeof TestLateUnion_AnotherUnion_Which];
export class TestLateUnion_AnotherUnion extends $.Struct {
  static readonly QUX = TestLateUnion_AnotherUnion_Which.QUX;
  static readonly CORGE = TestLateUnion_AnotherUnion_Which.CORGE;
  static readonly GRAULT = TestLateUnion_AnotherUnion_Which.GRAULT;
  static readonly _capnp = {
    displayName: "anotherUnion",
    id: "c1973984dee98e3a",
    size: new $.ObjectSize(24, 3)
  };
  getQux(): string {
    $.Struct.testWhich("qux", $.Struct.getUint16(12, this), 0, this);
    return $.Struct.getText(2, this);
  }
  isQux(): boolean {
    return $.Struct.getUint16(12, this) === 0;
  }
  setQux(value: string): void {
    $.Struct.setUint16(12, 0, this);
    $.Struct.setText(2, value, this);
  }
  adoptCorge(value: $.Orphan<$.List<number>>): void {
    $.Struct.setUint16(12, 1, this);
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownCorge(): $.Orphan<$.List<number>> {
    return $.Struct.disown(this.getCorge());
  }
  getCorge(): $.List<number> {
    $.Struct.testWhich("corge", $.Struct.getUint16(12, this), 1, this);
    return $.Struct.getList(2, $.Int32List, this);
  }
  hasCorge(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initCorge(length: number): $.List<number> {
    $.Struct.setUint16(12, 1, this);
    return $.Struct.initList(2, $.Int32List, length, this);
  }
  isCorge(): boolean {
    return $.Struct.getUint16(12, this) === 1;
  }
  setCorge(value: $.List<number>): void {
    $.Struct.setUint16(12, 1, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  getGrault(): number {
    $.Struct.testWhich("grault", $.Struct.getUint16(12, this), 2, this);
    return $.Struct.getFloat32(16, this);
  }
  isGrault(): boolean {
    return $.Struct.getUint16(12, this) === 2;
  }
  setGrault(value: number): void {
    $.Struct.setUint16(12, 2, this);
    $.Struct.setFloat32(16, value, this);
  }
  toString(): string {
    return "TestLateUnion_AnotherUnion_" + super.toString();
  }
  which(): TestLateUnion_AnotherUnion_Which {
    return $.Struct.getUint16(12, this) as TestLateUnion_AnotherUnion_Which;
  }
}
export class TestLateUnion extends $.Struct {
  static readonly _capnp = {
    displayName: "TestLateUnion",
    id: "a76e3c9bb7fd56d3",
    size: new $.ObjectSize(24, 3)
  };
  getFoo(): number {
    return $.Struct.getInt32(0, this);
  }
  setFoo(value: number): void {
    $.Struct.setInt32(0, value, this);
  }
  getBar(): string {
    return $.Struct.getText(0, this);
  }
  setBar(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getBaz(): number {
    return $.Struct.getInt16(4, this);
  }
  setBaz(value: number): void {
    $.Struct.setInt16(4, value, this);
  }
  getTheUnion(): TestLateUnion_TheUnion {
    return $.Struct.getAs(TestLateUnion_TheUnion, this);
  }
  initTheUnion(): TestLateUnion_TheUnion {
    return $.Struct.getAs(TestLateUnion_TheUnion, this);
  }
  getAnotherUnion(): TestLateUnion_AnotherUnion {
    return $.Struct.getAs(TestLateUnion_AnotherUnion, this);
  }
  initAnotherUnion(): TestLateUnion_AnotherUnion {
    return $.Struct.getAs(TestLateUnion_AnotherUnion, this);
  }
  toString(): string {
    return "TestLateUnion_" + super.toString();
  }
}
export class TestOldVersion extends $.Struct {
  static readonly _capnp = {
    displayName: "TestOldVersion",
    id: "95b30dd14e01dda8",
    size: new $.ObjectSize(8, 2)
  };
  getOld1(): bigint {
    return $.Struct.getInt64(0, this);
  }
  setOld1(value: bigint): void {
    $.Struct.setInt64(0, value, this);
  }
  getOld2(): string {
    return $.Struct.getText(0, this);
  }
  setOld2(value: string): void {
    $.Struct.setText(0, value, this);
  }
  adoptOld3(value: $.Orphan<TestOldVersion>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownOld3(): $.Orphan<TestOldVersion> {
    return $.Struct.disown(this.getOld3());
  }
  getOld3(): TestOldVersion {
    return $.Struct.getStruct(1, TestOldVersion, this);
  }
  hasOld3(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initOld3(): TestOldVersion {
    return $.Struct.initStructAt(1, TestOldVersion, this);
  }
  setOld3(value: TestOldVersion): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestOldVersion_" + super.toString();
  }
}
export class TestNewVersion extends $.Struct {
  static readonly _capnp = {
    displayName: "TestNewVersion",
    id: "8ed75a7469f04ce3",
    size: new $.ObjectSize(16, 3),
    defaultNew1: $.getInt64Mask(BigInt("0x3db")),
    defaultNew2: "baz"
  };
  getOld1(): bigint {
    return $.Struct.getInt64(0, this);
  }
  setOld1(value: bigint): void {
    $.Struct.setInt64(0, value, this);
  }
  getOld2(): string {
    return $.Struct.getText(0, this);
  }
  setOld2(value: string): void {
    $.Struct.setText(0, value, this);
  }
  adoptOld3(value: $.Orphan<TestNewVersion>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownOld3(): $.Orphan<TestNewVersion> {
    return $.Struct.disown(this.getOld3());
  }
  getOld3(): TestNewVersion {
    return $.Struct.getStruct(1, TestNewVersion, this);
  }
  hasOld3(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initOld3(): TestNewVersion {
    return $.Struct.initStructAt(1, TestNewVersion, this);
  }
  setOld3(value: TestNewVersion): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  getNew1(): bigint {
    return $.Struct.getInt64(8, this, TestNewVersion._capnp.defaultNew1);
  }
  setNew1(value: bigint): void {
    $.Struct.setInt64(8, value, this, TestNewVersion._capnp.defaultNew1);
  }
  getNew2(): string {
    return $.Struct.getText(2, this, TestNewVersion._capnp.defaultNew2);
  }
  setNew2(value: string): void {
    $.Struct.setText(2, value, this);
  }
  toString(): string {
    return "TestNewVersion_" + super.toString();
  }
}
export const TestOldUnionVersion_Which = {
  A: 0,
  B: 1
} as const;
export type TestOldUnionVersion_Which = (typeof TestOldUnionVersion_Which)[keyof typeof TestOldUnionVersion_Which];
export class TestOldUnionVersion extends $.Struct {
  static readonly A = TestOldUnionVersion_Which.A;
  static readonly B = TestOldUnionVersion_Which.B;
  static readonly _capnp = {
    displayName: "TestOldUnionVersion",
    id: "bd5fe16e5170c492",
    size: new $.ObjectSize(16, 0)
  };
  isA(): boolean {
    return $.Struct.getUint16(0, this) === 0;
  }
  setA(): void {
    $.Struct.setUint16(0, 0, this);
  }
  getB(): bigint {
    $.Struct.testWhich("b", $.Struct.getUint16(0, this), 1, this);
    return $.Struct.getUint64(8, this);
  }
  isB(): boolean {
    return $.Struct.getUint16(0, this) === 1;
  }
  setB(value: bigint): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.setUint64(8, value, this);
  }
  toString(): string {
    return "TestOldUnionVersion_" + super.toString();
  }
  which(): TestOldUnionVersion_Which {
    return $.Struct.getUint16(0, this) as TestOldUnionVersion_Which;
  }
}
export const TestNewUnionVersion_A_Which = {
  A0: 0,
  A1: 1
} as const;
export type TestNewUnionVersion_A_Which = (typeof TestNewUnionVersion_A_Which)[keyof typeof TestNewUnionVersion_A_Which];
export class TestNewUnionVersion_A extends $.Struct {
  static readonly A0 = TestNewUnionVersion_A_Which.A0;
  static readonly A1 = TestNewUnionVersion_A_Which.A1;
  static readonly _capnp = {
    displayName: "a",
    id: "86232c1de4513e84",
    size: new $.ObjectSize(24, 0)
  };
  isA0(): boolean {
    return $.Struct.getUint16(8, this) === 0;
  }
  setA0(): void {
    $.Struct.setUint16(8, 0, this);
  }
  getA1(): bigint {
    $.Struct.testWhich("a1", $.Struct.getUint16(8, this), 1, this);
    return $.Struct.getUint64(16, this);
  }
  isA1(): boolean {
    return $.Struct.getUint16(8, this) === 1;
  }
  setA1(value: bigint): void {
    $.Struct.setUint16(8, 1, this);
    $.Struct.setUint64(16, value, this);
  }
  toString(): string {
    return "TestNewUnionVersion_A_" + super.toString();
  }
  which(): TestNewUnionVersion_A_Which {
    return $.Struct.getUint16(8, this) as TestNewUnionVersion_A_Which;
  }
}
export const TestNewUnionVersion_Which = {
  A: 0,
  B: 1
} as const;
export type TestNewUnionVersion_Which = (typeof TestNewUnionVersion_Which)[keyof typeof TestNewUnionVersion_Which];
export class TestNewUnionVersion extends $.Struct {
  static readonly A = TestNewUnionVersion_Which.A;
  static readonly B = TestNewUnionVersion_Which.B;
  static readonly _capnp = {
    displayName: "TestNewUnionVersion",
    id: "c7e4c513a975492b",
    size: new $.ObjectSize(24, 0)
  };
  getA(): TestNewUnionVersion_A {
    $.Struct.testWhich("a", $.Struct.getUint16(0, this), 0, this);
    return $.Struct.getAs(TestNewUnionVersion_A, this);
  }
  initA(): TestNewUnionVersion_A {
    $.Struct.setUint16(0, 0, this);
    return $.Struct.getAs(TestNewUnionVersion_A, this);
  }
  isA(): boolean {
    return $.Struct.getUint16(0, this) === 0;
  }
  setA(): void {
    $.Struct.setUint16(0, 0, this);
  }
  getB(): bigint {
    $.Struct.testWhich("b", $.Struct.getUint16(0, this), 1, this);
    return $.Struct.getUint64(8, this);
  }
  isB(): boolean {
    return $.Struct.getUint16(0, this) === 1;
  }
  setB(value: bigint): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.setUint64(8, value, this);
  }
  toString(): string {
    return "TestNewUnionVersion_" + super.toString();
  }
  which(): TestNewUnionVersion_Which {
    return $.Struct.getUint16(0, this) as TestNewUnionVersion_Which;
  }
}
export class TestStructUnion_SomeStruct extends $.Struct {
  static readonly _capnp = {
    displayName: "SomeStruct",
    id: "9daec9823f171085",
    size: new $.ObjectSize(0, 2)
  };
  getSomeText(): string {
    return $.Struct.getText(0, this);
  }
  setSomeText(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getMoreText(): string {
    return $.Struct.getText(1, this);
  }
  setMoreText(value: string): void {
    $.Struct.setText(1, value, this);
  }
  toString(): string {
    return "TestStructUnion_SomeStruct_" + super.toString();
  }
}
export const TestStructUnion_Un_Which = {
  STRUCT: 0,
  OBJECT: 1
} as const;
export type TestStructUnion_Un_Which = (typeof TestStructUnion_Un_Which)[keyof typeof TestStructUnion_Un_Which];
export class TestStructUnion_Un extends $.Struct {
  static readonly STRUCT = TestStructUnion_Un_Which.STRUCT;
  static readonly OBJECT = TestStructUnion_Un_Which.OBJECT;
  static readonly _capnp = {
    displayName: "un",
    id: "992edc677bef5a3c",
    size: new $.ObjectSize(8, 1)
  };
  adoptStruct(value: $.Orphan<TestStructUnion_SomeStruct>): void {
    $.Struct.setUint16(0, 0, this);
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownStruct(): $.Orphan<TestStructUnion_SomeStruct> {
    return $.Struct.disown(this.getStruct());
  }
  getStruct(): TestStructUnion_SomeStruct {
    $.Struct.testWhich("struct", $.Struct.getUint16(0, this), 0, this);
    return $.Struct.getStruct(0, TestStructUnion_SomeStruct, this);
  }
  hasStruct(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initStruct(): TestStructUnion_SomeStruct {
    $.Struct.setUint16(0, 0, this);
    return $.Struct.initStructAt(0, TestStructUnion_SomeStruct, this);
  }
  isStruct(): boolean {
    return $.Struct.getUint16(0, this) === 0;
  }
  setStruct(value: TestStructUnion_SomeStruct): void {
    $.Struct.setUint16(0, 0, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptObject(value: $.Orphan<TestAnyPointer>): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownObject(): $.Orphan<TestAnyPointer> {
    return $.Struct.disown(this.getObject());
  }
  getObject(): TestAnyPointer {
    $.Struct.testWhich("object", $.Struct.getUint16(0, this), 1, this);
    return $.Struct.getStruct(0, TestAnyPointer, this);
  }
  hasObject(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initObject(): TestAnyPointer {
    $.Struct.setUint16(0, 1, this);
    return $.Struct.initStructAt(0, TestAnyPointer, this);
  }
  isObject(): boolean {
    return $.Struct.getUint16(0, this) === 1;
  }
  setObject(value: TestAnyPointer): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestStructUnion_Un_" + super.toString();
  }
  which(): TestStructUnion_Un_Which {
    return $.Struct.getUint16(0, this) as TestStructUnion_Un_Which;
  }
}
export class TestStructUnion extends $.Struct {
  static readonly SomeStruct = TestStructUnion_SomeStruct;
  static readonly _capnp = {
    displayName: "TestStructUnion",
    id: "faf781ef89a00e39",
    size: new $.ObjectSize(8, 1)
  };
  getUn(): TestStructUnion_Un {
    return $.Struct.getAs(TestStructUnion_Un, this);
  }
  initUn(): TestStructUnion_Un {
    return $.Struct.getAs(TestStructUnion_Un, this);
  }
  toString(): string {
    return "TestStructUnion_" + super.toString();
  }
}
export class TestPrintInlineStructs_InlineStruct extends $.Struct {
  static readonly _capnp = {
    displayName: "InlineStruct",
    id: "8e4936003708dac2",
    size: new $.ObjectSize(8, 1)
  };
  getInt32Field(): number {
    return $.Struct.getInt32(0, this);
  }
  setInt32Field(value: number): void {
    $.Struct.setInt32(0, value, this);
  }
  getTextField(): string {
    return $.Struct.getText(0, this);
  }
  setTextField(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestPrintInlineStructs_InlineStruct_" + super.toString();
  }
}
export class TestPrintInlineStructs extends $.Struct {
  static readonly InlineStruct = TestPrintInlineStructs_InlineStruct;
  static readonly _capnp = {
    displayName: "TestPrintInlineStructs",
    id: "dec497819d097c3c",
    size: new $.ObjectSize(0, 2)
  };
  static _StructList: $.ListCtor<TestPrintInlineStructs_InlineStruct>;
  getSomeText(): string {
    return $.Struct.getText(0, this);
  }
  setSomeText(value: string): void {
    $.Struct.setText(0, value, this);
  }
  adoptStructList(value: $.Orphan<$.List<TestPrintInlineStructs_InlineStruct>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownStructList(): $.Orphan<$.List<TestPrintInlineStructs_InlineStruct>> {
    return $.Struct.disown(this.getStructList());
  }
  getStructList(): $.List<TestPrintInlineStructs_InlineStruct> {
    return $.Struct.getList(1, TestPrintInlineStructs._StructList, this);
  }
  hasStructList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initStructList(length: number): $.List<TestPrintInlineStructs_InlineStruct> {
    return $.Struct.initList(1, TestPrintInlineStructs._StructList, length, this);
  }
  setStructList(value: $.List<TestPrintInlineStructs_InlineStruct>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestPrintInlineStructs_" + super.toString();
  }
}
export class TestWholeFloatDefault extends $.Struct {
  static readonly CONSTANT = 456;
  static readonly BIG_CONSTANT = 4.000000060189865e+30;
  static readonly _capnp = {
    displayName: "TestWholeFloatDefault",
    id: "91afd4a864dbb030",
    size: new $.ObjectSize(8, 0),
    defaultField: $.getFloat32Mask(123),
    defaultBigField: $.getFloat32Mask(2.0000000300949324e+30)
  };
  getField(): number {
    return $.Struct.getFloat32(0, this, TestWholeFloatDefault._capnp.defaultField);
  }
  setField(value: number): void {
    $.Struct.setFloat32(0, value, this, TestWholeFloatDefault._capnp.defaultField);
  }
  getBigField(): number {
    return $.Struct.getFloat32(4, this, TestWholeFloatDefault._capnp.defaultBigField);
  }
  setBigField(value: number): void {
    $.Struct.setFloat32(4, value, this, TestWholeFloatDefault._capnp.defaultBigField);
  }
  toString(): string {
    return "TestWholeFloatDefault_" + super.toString();
  }
}
export class TestGenerics_Inner extends $.Struct {
  static readonly _capnp = {
    displayName: "Inner",
    id: "f6a841117e19ac73",
    size: new $.ObjectSize(0, 2)
  };
  adoptFoo(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownFoo(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getFoo());
  }
  getFoo(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setFoo(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptBar(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownBar(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getBar());
  }
  getBar(): $.Pointer {
    return $.Struct.getPointer(1, this);
  }
  hasBar(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  setBar(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestGenerics_Inner_" + super.toString();
  }
}
export class TestGenerics_Inner2_DeepNest_DeepNestInterface extends $.Struct {
  static readonly _capnp = {
    displayName: "DeepNestInterface",
    id: "8839ed86c9794287",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestGenerics_Inner2_DeepNest_DeepNestInterface_" + super.toString();
  }
}
export class TestGenerics_Inner2_DeepNest extends $.Struct {
  static readonly DeepNestInterface = TestGenerics_Inner2_DeepNest_DeepNestInterface;
  static readonly _capnp = {
    displayName: "DeepNest",
    id: "b6a0829c762b06f3",
    size: new $.ObjectSize(0, 4)
  };
  adoptFoo(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownFoo(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getFoo());
  }
  getFoo(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setFoo(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptBar(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownBar(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getBar());
  }
  getBar(): $.Pointer {
    return $.Struct.getPointer(1, this);
  }
  hasBar(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  setBar(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptBaz(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownBaz(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getBaz());
  }
  getBaz(): $.Pointer {
    return $.Struct.getPointer(2, this);
  }
  hasBaz(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  setBaz(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptQux(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownQux(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getQux());
  }
  getQux(): $.Pointer {
    return $.Struct.getPointer(3, this);
  }
  hasQux(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  setQux(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  toString(): string {
    return "TestGenerics_Inner2_DeepNest_" + super.toString();
  }
}
export class TestGenerics_Inner2 extends $.Struct {
  static readonly DeepNest = TestGenerics_Inner2_DeepNest;
  static readonly _capnp = {
    displayName: "Inner2",
    id: "a9ab42b118d6d435",
    size: new $.ObjectSize(0, 4)
  };
  adoptBar(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownBar(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getBar());
  }
  getBar(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasBar(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setBar(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptBaz(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownBaz(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getBaz());
  }
  getBaz(): $.Pointer {
    return $.Struct.getPointer(1, this);
  }
  hasBaz(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  setBaz(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptInnerBound(value: $.Orphan<TestGenerics_Inner>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownInnerBound(): $.Orphan<TestGenerics_Inner> {
    return $.Struct.disown(this.getInnerBound());
  }
  getInnerBound(): TestGenerics_Inner {
    return $.Struct.getStruct(2, TestGenerics_Inner, this);
  }
  hasInnerBound(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initInnerBound(): TestGenerics_Inner {
    return $.Struct.initStructAt(2, TestGenerics_Inner, this);
  }
  setInnerBound(value: TestGenerics_Inner): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptInnerUnbound(value: $.Orphan<TestGenerics_Inner>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownInnerUnbound(): $.Orphan<TestGenerics_Inner> {
    return $.Struct.disown(this.getInnerUnbound());
  }
  getInnerUnbound(): TestGenerics_Inner {
    return $.Struct.getStruct(3, TestGenerics_Inner, this);
  }
  hasInnerUnbound(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initInnerUnbound(): TestGenerics_Inner {
    return $.Struct.initStructAt(3, TestGenerics_Inner, this);
  }
  setInnerUnbound(value: TestGenerics_Inner): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  toString(): string {
    return "TestGenerics_Inner2_" + super.toString();
  }
}
export class TestGenerics_Interface extends $.Struct {
  static readonly _capnp = {
    displayName: "Interface",
    id: "c9e749e8dd54da5c",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestGenerics_Interface_" + super.toString();
  }
}
export class TestGenerics_UseAliases extends $.Struct {
  static readonly _capnp = {
    displayName: "UseAliases",
    id: "8e656edfb45ba6cf",
    size: new $.ObjectSize(0, 6)
  };
  adoptFoo(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownFoo(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getFoo());
  }
  getFoo(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setFoo(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptInner(value: $.Orphan<TestGenerics_Inner>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownInner(): $.Orphan<TestGenerics_Inner> {
    return $.Struct.disown(this.getInner());
  }
  getInner(): TestGenerics_Inner {
    return $.Struct.getStruct(1, TestGenerics_Inner, this);
  }
  hasInner(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initInner(): TestGenerics_Inner {
    return $.Struct.initStructAt(1, TestGenerics_Inner, this);
  }
  setInner(value: TestGenerics_Inner): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptInner2(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownInner2(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getInner2());
  }
  getInner2(): TestGenerics_Inner2 {
    return $.Struct.getStruct(2, TestGenerics_Inner2, this);
  }
  hasInner2(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initInner2(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(2, TestGenerics_Inner2, this);
  }
  setInner2(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptInner2Bind(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownInner2Bind(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getInner2Bind());
  }
  getInner2Bind(): TestGenerics_Inner2 {
    return $.Struct.getStruct(3, TestGenerics_Inner2, this);
  }
  hasInner2Bind(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initInner2Bind(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(3, TestGenerics_Inner2, this);
  }
  setInner2Bind(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  adoptInner2Text(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(4, this));
  }
  disownInner2Text(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getInner2Text());
  }
  getInner2Text(): TestGenerics_Inner2 {
    return $.Struct.getStruct(4, TestGenerics_Inner2, this);
  }
  hasInner2Text(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(4, this));
  }
  initInner2Text(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(4, TestGenerics_Inner2, this);
  }
  setInner2Text(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(4, this));
  }
  adoptRevFoo(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(5, this));
  }
  disownRevFoo(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getRevFoo());
  }
  getRevFoo(): $.Pointer {
    return $.Struct.getPointer(5, this);
  }
  hasRevFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(5, this));
  }
  setRevFoo(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(5, this));
  }
  toString(): string {
    return "TestGenerics_UseAliases_" + super.toString();
  }
}
export class TestGenerics_Ug extends $.Struct {
  static readonly _capnp = {
    displayName: "ug",
    id: "b46a779beaf3384e",
    size: new $.ObjectSize(8, 2)
  };
  getUgfoo(): number {
    return $.Struct.getInt32(4, this);
  }
  setUgfoo(value: number): void {
    $.Struct.setInt32(4, value, this);
  }
  toString(): string {
    return "TestGenerics_Ug_" + super.toString();
  }
}
export const TestGenerics_Which = {
  UV: 0,
  UG: 1
} as const;
export type TestGenerics_Which = (typeof TestGenerics_Which)[keyof typeof TestGenerics_Which];
export class TestGenerics extends $.Struct {
  static readonly UV = TestGenerics_Which.UV;
  static readonly UG = TestGenerics_Which.UG;
  static readonly Inner = TestGenerics_Inner;
  static readonly Inner2 = TestGenerics_Inner2;
  static readonly Interface = TestGenerics_Interface;
  static readonly UseAliases = TestGenerics_UseAliases;
  static readonly _capnp = {
    displayName: "TestGenerics",
    id: "9d5b8cd8de9922eb",
    size: new $.ObjectSize(8, 2)
  };
  adoptFoo(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownFoo(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getFoo());
  }
  getFoo(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setFoo(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptRev(value: $.Orphan<TestGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownRev(): $.Orphan<TestGenerics> {
    return $.Struct.disown(this.getRev());
  }
  getRev(): TestGenerics {
    return $.Struct.getStruct(1, TestGenerics, this);
  }
  hasRev(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initRev(): TestGenerics {
    return $.Struct.initStructAt(1, TestGenerics, this);
  }
  setRev(value: TestGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  isUv(): boolean {
    return $.Struct.getUint16(0, this) === 0;
  }
  setUv(): void {
    $.Struct.setUint16(0, 0, this);
  }
  getUg(): TestGenerics_Ug {
    $.Struct.testWhich("ug", $.Struct.getUint16(0, this), 1, this);
    return $.Struct.getAs(TestGenerics_Ug, this);
  }
  initUg(): TestGenerics_Ug {
    $.Struct.setUint16(0, 1, this);
    return $.Struct.getAs(TestGenerics_Ug, this);
  }
  isUg(): boolean {
    return $.Struct.getUint16(0, this) === 1;
  }
  setUg(): void {
    $.Struct.setUint16(0, 1, this);
  }
  toString(): string {
    return "TestGenerics_" + super.toString();
  }
  which(): TestGenerics_Which {
    return $.Struct.getUint16(0, this) as TestGenerics_Which;
  }
}
export class TestGenericsWrapper extends $.Struct {
  static readonly _capnp = {
    displayName: "TestGenericsWrapper",
    id: "a9b2b1f52dde845d",
    size: new $.ObjectSize(0, 1)
  };
  adoptValue(value: $.Orphan<TestGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownValue(): $.Orphan<TestGenerics> {
    return $.Struct.disown(this.getValue());
  }
  getValue(): TestGenerics {
    return $.Struct.getStruct(0, TestGenerics, this);
  }
  hasValue(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initValue(): TestGenerics {
    return $.Struct.initStructAt(0, TestGenerics, this);
  }
  setValue(value: TestGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestGenericsWrapper_" + super.toString();
  }
}
export class TestGenericsWrapper2 extends $.Struct {
  static readonly _capnp = {
    displayName: "TestGenericsWrapper2",
    id: "f28f83667a557a04",
    size: new $.ObjectSize(0, 1)
  };
  adoptValue(value: $.Orphan<TestGenericsWrapper>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownValue(): $.Orphan<TestGenericsWrapper> {
    return $.Struct.disown(this.getValue());
  }
  getValue(): TestGenericsWrapper {
    return $.Struct.getStruct(0, TestGenericsWrapper, this);
  }
  hasValue(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initValue(): TestGenericsWrapper {
    return $.Struct.initStructAt(0, TestGenericsWrapper, this);
  }
  setValue(value: TestGenericsWrapper): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestGenericsWrapper2_" + super.toString();
  }
}
export class TestImplicitMethodParams extends $.Struct {
  static readonly _capnp = {
    displayName: "TestImplicitMethodParams",
    id: "8b9717a3f8d85a9a",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestImplicitMethodParams_" + super.toString();
  }
}
export class TestImplicitMethodParamsInGeneric extends $.Struct {
  static readonly _capnp = {
    displayName: "TestImplicitMethodParamsInGeneric",
    id: "df9ccdeb81a704c9",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestImplicitMethodParamsInGeneric_" + super.toString();
  }
}
export const TestGenericsUnion_Which = {
  FOO: 0,
  BAR: 1
} as const;
export type TestGenericsUnion_Which = (typeof TestGenericsUnion_Which)[keyof typeof TestGenericsUnion_Which];
export class TestGenericsUnion extends $.Struct {
  static readonly FOO = TestGenericsUnion_Which.FOO;
  static readonly BAR = TestGenericsUnion_Which.BAR;
  static readonly _capnp = {
    displayName: "TestGenericsUnion",
    id: "a54870440e919063",
    size: new $.ObjectSize(8, 1)
  };
  adoptFoo(value: $.Orphan<$.Pointer>): void {
    $.Struct.setUint16(0, 0, this);
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownFoo(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getFoo());
  }
  getFoo(): $.Pointer {
    $.Struct.testWhich("foo", $.Struct.getUint16(0, this), 0, this);
    return $.Struct.getPointer(0, this);
  }
  hasFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  isFoo(): boolean {
    return $.Struct.getUint16(0, this) === 0;
  }
  setFoo(value: $.Pointer): void {
    $.Struct.setUint16(0, 0, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptBar(value: $.Orphan<$.Pointer>): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownBar(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getBar());
  }
  getBar(): $.Pointer {
    $.Struct.testWhich("bar", $.Struct.getUint16(0, this), 1, this);
    return $.Struct.getPointer(0, this);
  }
  hasBar(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  isBar(): boolean {
    return $.Struct.getUint16(0, this) === 1;
  }
  setBar(value: $.Pointer): void {
    $.Struct.setUint16(0, 1, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestGenericsUnion_" + super.toString();
  }
  which(): TestGenericsUnion_Which {
    return $.Struct.getUint16(0, this) as TestGenericsUnion_Which;
  }
}
export class TestUseGenerics extends $.Struct {
  static readonly _capnp = {
    displayName: "TestUseGenerics",
    id: "9427b2a71030338f",
    size: new $.ObjectSize(0, 20),
    defaultDefault: $.readRawPointer(new Uint8Array([0x10, 0x3f, 0x50, 0x01, 0x02, 0x00, 0x00, 0x51, 0x04, 0x06, 0x14, 0x51, 0x68, 0x01, 0x02, 0x04, 0x7b, 0x00, 0x19, 0x11, 0x05, 0x2a, 0x51, 0x04, 0x01, 0x02, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x0c, 0x41, 0x01, 0x00, 0x18]).buffer),
    defaultDefaultInner: $.readRawPointer(new Uint8Array([0x10, 0x1e, 0x40, 0x02, 0x51, 0x04, 0x06, 0x14, 0x11, 0x69, 0x2a, 0x04, 0x7b, 0x00, 0x18, 0x0f, 0x74, 0x65, 0x78, 0x74]).buffer),
    defaultDefaultUser: $.readRawPointer(new Uint8Array([0x10, 0x32, 0x40, 0x14, 0x51, 0x4c, 0x01, 0x02, 0x00, 0x13, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x18]).buffer),
    defaultDefaultWrapper: $.readRawPointer(new Uint8Array([0x10, 0x23, 0x40, 0x01, 0x50, 0x01, 0x02, 0x00, 0x00, 0x11, 0x05, 0x2a, 0x51, 0x04, 0x01, 0x02, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x0c, 0x41, 0x01, 0x00, 0x18]).buffer),
    defaultDefaultWrapper2: $.readRawPointer(new Uint8Array([0x10, 0x24, 0x40, 0x01, 0x40, 0x01, 0x50, 0x01, 0x02, 0x00, 0x00, 0x11, 0x05, 0x2a, 0x51, 0x04, 0x01, 0x02, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x0c, 0x41, 0x01, 0x00, 0x18]).buffer),
    defaultAliasFoo: $.readRawPointer(new Uint8Array([0x10, 0x1b, 0x50, 0x06, 0x14, 0x04, 0x7b, 0x00, 0x18]).buffer),
    defaultAliasInner: $.readRawPointer(new Uint8Array([0x10, 0x1d, 0x40, 0x02, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x18]).buffer),
    defaultAliasInner2: $.readRawPointer(new Uint8Array([0x10, 0x21, 0x40, 0x04, 0x00, 0x01, 0x41, 0x04, 0x02, 0x00, 0x00, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x18]).buffer),
    defaultAliasInner2Bind: $.readRawPointer(new Uint8Array([0x10, 0x22, 0x40, 0x04, 0x00, 0x00, 0x11, 0x09, 0x14, 0x41, 0x08, 0x02, 0x00, 0x00, 0x11, 0x0c, 0x22, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x18]).buffer),
    defaultAliasInner2Text: $.readRawPointer(new Uint8Array([0x10, 0x22, 0x40, 0x04, 0x00, 0x00, 0x11, 0x09, 0x2a, 0x41, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x18]).buffer),
    defaultAliasRev: "text",
    defaultUseAliases: $.readRawPointer(new Uint8Array([0x10, 0xa1, 0x40, 0x06, 0x51, 0x14, 0x06, 0x14, 0x41, 0x78, 0x02, 0x41, 0xe4, 0x04, 0x43, 0x60, 0x01, 0x04, 0x43, 0xe0, 0x01, 0x04, 0x13, 0x61, 0x02, 0x1c, 0x04, 0x7b, 0x00, 0x18, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x1a, 0x41, 0x04, 0x02, 0x00, 0x00, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x19, 0x11, 0x09, 0x2a, 0x41, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x19, 0x11, 0x09, 0x2a, 0x41, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x51, 0x04, 0x06, 0x14, 0x00, 0x00, 0x04, 0x7b, 0x00, 0x18, 0x11, 0x0c, 0x22, 0x01, 0x38]).buffer)
  };
  adoptBasic(value: $.Orphan<TestGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownBasic(): $.Orphan<TestGenerics> {
    return $.Struct.disown(this.getBasic());
  }
  getBasic(): TestGenerics {
    return $.Struct.getStruct(0, TestGenerics, this);
  }
  hasBasic(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initBasic(): TestGenerics {
    return $.Struct.initStructAt(0, TestGenerics, this);
  }
  setBasic(value: TestGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptInner(value: $.Orphan<TestGenerics_Inner>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownInner(): $.Orphan<TestGenerics_Inner> {
    return $.Struct.disown(this.getInner());
  }
  getInner(): TestGenerics_Inner {
    return $.Struct.getStruct(1, TestGenerics_Inner, this);
  }
  hasInner(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initInner(): TestGenerics_Inner {
    return $.Struct.initStructAt(1, TestGenerics_Inner, this);
  }
  setInner(value: TestGenerics_Inner): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptInner2(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownInner2(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getInner2());
  }
  getInner2(): TestGenerics_Inner2 {
    return $.Struct.getStruct(2, TestGenerics_Inner2, this);
  }
  hasInner2(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  initInner2(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(2, TestGenerics_Inner2, this);
  }
  setInner2(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptUnspecified(value: $.Orphan<TestGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownUnspecified(): $.Orphan<TestGenerics> {
    return $.Struct.disown(this.getUnspecified());
  }
  getUnspecified(): TestGenerics {
    return $.Struct.getStruct(3, TestGenerics, this);
  }
  hasUnspecified(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  initUnspecified(): TestGenerics {
    return $.Struct.initStructAt(3, TestGenerics, this);
  }
  setUnspecified(value: TestGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  adoptUnspecifiedInner(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(4, this));
  }
  disownUnspecifiedInner(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getUnspecifiedInner());
  }
  getUnspecifiedInner(): TestGenerics_Inner2 {
    return $.Struct.getStruct(4, TestGenerics_Inner2, this);
  }
  hasUnspecifiedInner(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(4, this));
  }
  initUnspecifiedInner(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(4, TestGenerics_Inner2, this);
  }
  setUnspecifiedInner(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(4, this));
  }
  adoptWrapper(value: $.Orphan<TestGenericsWrapper>): void {
    $.Struct.adopt(value, $.Struct.getPointer(8, this));
  }
  disownWrapper(): $.Orphan<TestGenericsWrapper> {
    return $.Struct.disown(this.getWrapper());
  }
  getWrapper(): TestGenericsWrapper {
    return $.Struct.getStruct(8, TestGenericsWrapper, this);
  }
  hasWrapper(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(8, this));
  }
  initWrapper(): TestGenericsWrapper {
    return $.Struct.initStructAt(8, TestGenericsWrapper, this);
  }
  setWrapper(value: TestGenericsWrapper): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(8, this));
  }
  adoptCap(value: $.Orphan<TestGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(18, this));
  }
  disownCap(): $.Orphan<TestGenerics> {
    return $.Struct.disown(this.getCap());
  }
  getCap(): TestGenerics {
    return $.Struct.getStruct(18, TestGenerics, this);
  }
  hasCap(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(18, this));
  }
  initCap(): TestGenerics {
    return $.Struct.initStructAt(18, TestGenerics, this);
  }
  setCap(value: TestGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(18, this));
  }
  getGenericCap(): $.Interface {
    return $.Struct.getPointerAs(19, $.Interface, this);
  }
  setGenericCap(value: $.Interface): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(19, this));
  }
  adoptDefault(value: $.Orphan<TestGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(5, this));
  }
  disownDefault(): $.Orphan<TestGenerics> {
    return $.Struct.disown(this.getDefault());
  }
  getDefault(): TestGenerics {
    return $.Struct.getStruct(5, TestGenerics, this, TestUseGenerics._capnp.defaultDefault);
  }
  hasDefault(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(5, this));
  }
  initDefault(): TestGenerics {
    return $.Struct.initStructAt(5, TestGenerics, this);
  }
  setDefault(value: TestGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(5, this));
  }
  adoptDefaultInner(value: $.Orphan<TestGenerics_Inner>): void {
    $.Struct.adopt(value, $.Struct.getPointer(6, this));
  }
  disownDefaultInner(): $.Orphan<TestGenerics_Inner> {
    return $.Struct.disown(this.getDefaultInner());
  }
  getDefaultInner(): TestGenerics_Inner {
    return $.Struct.getStruct(6, TestGenerics_Inner, this, TestUseGenerics._capnp.defaultDefaultInner);
  }
  hasDefaultInner(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(6, this));
  }
  initDefaultInner(): TestGenerics_Inner {
    return $.Struct.initStructAt(6, TestGenerics_Inner, this);
  }
  setDefaultInner(value: TestGenerics_Inner): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(6, this));
  }
  adoptDefaultUser(value: $.Orphan<TestUseGenerics>): void {
    $.Struct.adopt(value, $.Struct.getPointer(7, this));
  }
  disownDefaultUser(): $.Orphan<TestUseGenerics> {
    return $.Struct.disown(this.getDefaultUser());
  }
  getDefaultUser(): TestUseGenerics {
    return $.Struct.getStruct(7, TestUseGenerics, this, TestUseGenerics._capnp.defaultDefaultUser);
  }
  hasDefaultUser(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(7, this));
  }
  initDefaultUser(): TestUseGenerics {
    return $.Struct.initStructAt(7, TestUseGenerics, this);
  }
  setDefaultUser(value: TestUseGenerics): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(7, this));
  }
  adoptDefaultWrapper(value: $.Orphan<TestGenericsWrapper>): void {
    $.Struct.adopt(value, $.Struct.getPointer(9, this));
  }
  disownDefaultWrapper(): $.Orphan<TestGenericsWrapper> {
    return $.Struct.disown(this.getDefaultWrapper());
  }
  getDefaultWrapper(): TestGenericsWrapper {
    return $.Struct.getStruct(9, TestGenericsWrapper, this, TestUseGenerics._capnp.defaultDefaultWrapper);
  }
  hasDefaultWrapper(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(9, this));
  }
  initDefaultWrapper(): TestGenericsWrapper {
    return $.Struct.initStructAt(9, TestGenericsWrapper, this);
  }
  setDefaultWrapper(value: TestGenericsWrapper): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(9, this));
  }
  adoptDefaultWrapper2(value: $.Orphan<TestGenericsWrapper2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(10, this));
  }
  disownDefaultWrapper2(): $.Orphan<TestGenericsWrapper2> {
    return $.Struct.disown(this.getDefaultWrapper2());
  }
  getDefaultWrapper2(): TestGenericsWrapper2 {
    return $.Struct.getStruct(10, TestGenericsWrapper2, this, TestUseGenerics._capnp.defaultDefaultWrapper2);
  }
  hasDefaultWrapper2(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(10, this));
  }
  initDefaultWrapper2(): TestGenericsWrapper2 {
    return $.Struct.initStructAt(10, TestGenericsWrapper2, this);
  }
  setDefaultWrapper2(value: TestGenericsWrapper2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(10, this));
  }
  adoptAliasFoo(value: $.Orphan<TestAllTypes>): void {
    $.Struct.adopt(value, $.Struct.getPointer(11, this));
  }
  disownAliasFoo(): $.Orphan<TestAllTypes> {
    return $.Struct.disown(this.getAliasFoo());
  }
  getAliasFoo(): TestAllTypes {
    return $.Struct.getStruct(11, TestAllTypes, this, TestUseGenerics._capnp.defaultAliasFoo);
  }
  hasAliasFoo(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(11, this));
  }
  initAliasFoo(): TestAllTypes {
    return $.Struct.initStructAt(11, TestAllTypes, this);
  }
  setAliasFoo(value: TestAllTypes): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(11, this));
  }
  adoptAliasInner(value: $.Orphan<TestGenerics_Inner>): void {
    $.Struct.adopt(value, $.Struct.getPointer(12, this));
  }
  disownAliasInner(): $.Orphan<TestGenerics_Inner> {
    return $.Struct.disown(this.getAliasInner());
  }
  getAliasInner(): TestGenerics_Inner {
    return $.Struct.getStruct(12, TestGenerics_Inner, this, TestUseGenerics._capnp.defaultAliasInner);
  }
  hasAliasInner(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(12, this));
  }
  initAliasInner(): TestGenerics_Inner {
    return $.Struct.initStructAt(12, TestGenerics_Inner, this);
  }
  setAliasInner(value: TestGenerics_Inner): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(12, this));
  }
  adoptAliasInner2(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(13, this));
  }
  disownAliasInner2(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getAliasInner2());
  }
  getAliasInner2(): TestGenerics_Inner2 {
    return $.Struct.getStruct(13, TestGenerics_Inner2, this, TestUseGenerics._capnp.defaultAliasInner2);
  }
  hasAliasInner2(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(13, this));
  }
  initAliasInner2(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(13, TestGenerics_Inner2, this);
  }
  setAliasInner2(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(13, this));
  }
  adoptAliasInner2Bind(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(14, this));
  }
  disownAliasInner2Bind(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getAliasInner2Bind());
  }
  getAliasInner2Bind(): TestGenerics_Inner2 {
    return $.Struct.getStruct(14, TestGenerics_Inner2, this, TestUseGenerics._capnp.defaultAliasInner2Bind);
  }
  hasAliasInner2Bind(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(14, this));
  }
  initAliasInner2Bind(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(14, TestGenerics_Inner2, this);
  }
  setAliasInner2Bind(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(14, this));
  }
  adoptAliasInner2Text(value: $.Orphan<TestGenerics_Inner2>): void {
    $.Struct.adopt(value, $.Struct.getPointer(15, this));
  }
  disownAliasInner2Text(): $.Orphan<TestGenerics_Inner2> {
    return $.Struct.disown(this.getAliasInner2Text());
  }
  getAliasInner2Text(): TestGenerics_Inner2 {
    return $.Struct.getStruct(15, TestGenerics_Inner2, this, TestUseGenerics._capnp.defaultAliasInner2Text);
  }
  hasAliasInner2Text(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(15, this));
  }
  initAliasInner2Text(): TestGenerics_Inner2 {
    return $.Struct.initStructAt(15, TestGenerics_Inner2, this);
  }
  setAliasInner2Text(value: TestGenerics_Inner2): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(15, this));
  }
  getAliasRev(): string {
    return $.Struct.getText(16, this, TestUseGenerics._capnp.defaultAliasRev);
  }
  setAliasRev(value: string): void {
    $.Struct.setText(16, value, this);
  }
  adoptUseAliases(value: $.Orphan<TestGenerics_UseAliases>): void {
    $.Struct.adopt(value, $.Struct.getPointer(17, this));
  }
  disownUseAliases(): $.Orphan<TestGenerics_UseAliases> {
    return $.Struct.disown(this.getUseAliases());
  }
  getUseAliases(): TestGenerics_UseAliases {
    return $.Struct.getStruct(17, TestGenerics_UseAliases, this, TestUseGenerics._capnp.defaultUseAliases);
  }
  hasUseAliases(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(17, this));
  }
  initUseAliases(): TestGenerics_UseAliases {
    return $.Struct.initStructAt(17, TestGenerics_UseAliases, this);
  }
  setUseAliases(value: TestGenerics_UseAliases): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(17, this));
  }
  toString(): string {
    return "TestUseGenerics_" + super.toString();
  }
}
export class TestEmptyStruct extends $.Struct {
  static readonly _capnp = {
    displayName: "TestEmptyStruct",
    id: "c5598844441096dc",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestEmptyStruct_" + super.toString();
  }
}
export class TestConstants extends $.Struct {
  static readonly VOID_CONST = undefined;
  static readonly BOOL_CONST = true;
  static readonly INT8CONST = -123;
  static readonly INT16CONST = -12345;
  static readonly INT32CONST = -12345678;
  static readonly INT64CONST = -BigInt("0x7048860ddf79");
  static readonly UINT8CONST = 234;
  static readonly UINT16CONST = 45678;
  static readonly UINT32CONST = 3456789012;
  static readonly UINT64CONST = BigInt("0xab54a98ceb1f0ad2");
  static readonly FLOAT32CONST = 1234.5;
  static readonly FLOAT64CONST = -1.23e+47;
  static readonly TEXT_CONST = "foo";
  static readonly DATA_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x1a, 0x07, 0x62, 0x61, 0x72]).buffer);
  static readonly STRUCT_CONST = $.readRawPointer(new Uint8Array([0x10, 0xd0, 0x50, 0x06, 0x14, 0xff, 0x01, 0xf4, 0x80, 0x0d, 0x0e, 0x10, 0x4c, 0xfb, 0x00, 0x3f, 0x4e, 0x73, 0xe8, 0x38, 0xa6, 0x33, 0xfd, 0x5a, 0xd2, 0x04, 0x14, 0x88, 0x62, 0x03, 0xff, 0xd2, 0x0a, 0x6f, 0x12, 0x21, 0x19, 0xcc, 0x04, 0x00, 0x1f, 0x5f, 0x70, 0x09, 0xaf, 0x02, 0xe0, 0x90, 0x75, 0x40, 0x11, 0x4d, 0x22, 0x11, 0x4d, 0x1a, 0x51, 0x4c, 0x06, 0x14, 0x13, 0x25, 0x01, 0x18, 0x13, 0x21, 0x01, 0x29, 0x13, 0x21, 0x01, 0x22, 0x13, 0x21, 0x01, 0x23, 0x13, 0x21, 0x01, 0x24, 0x13, 0x25, 0x01, 0x25, 0x13, 0x31, 0x01, 0x22, 0x13, 0x31, 0x01, 0x23, 0x13, 0x31, 0x01, 0x24, 0x13, 0x35, 0x01, 0x25, 0x13, 0x41, 0x01, 0x34, 0x13, 0x49, 0x01, 0x35, 0x13, 0x5d, 0x01, 0x1e, 0x13, 0x71, 0x01, 0x1e, 0x33, 0x85, 0x01, 0x77, 0x02, 0x13, 0xd5, 0x02, 0x1b, 0x00, 0x00, 0x07, 0x62, 0x61, 0x7a, 0x07, 0x71, 0x75, 0x78, 0x00, 0x05, 0x11, 0x4d, 0x3a, 0x00, 0x00, 0x51, 0x48, 0x06, 0x14, 0x00, 0x10, 0x3f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x00, 0x05, 0x11, 0x4d, 0x72, 0x00, 0x12, 0xff, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6e, 0x00, 0x1f, 0x65, 0x73, 0x74, 0x65, 0x64, 0x01, 0x1a, 0x0f, 0x0c, 0xde, 0x80, 0x7f, 0xef, 0xd2, 0x04, 0xd2, 0xe9, 0x80, 0xff, 0x7f, 0xf7, 0x4e, 0x61, 0xbc, 0x40, 0xd3, 0xa0, 0xfa, 0xf8, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x79, 0xdf, 0x0d, 0x86, 0x48, 0x70, 0xff, 0x2e, 0x75, 0x13, 0xfd, 0x8a, 0x96, 0xfd, 0xff, 0x00, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x0b, 0x0c, 0x22, 0xff, 0xcf, 0xd2, 0x04, 0x2e, 0x16, 0xff, 0xff, 0xf7, 0x4e, 0x61, 0xbc, 0xc0, 0x2c, 0x5f, 0x05, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x79, 0xdf, 0x0d, 0x86, 0x48, 0x70, 0x7f, 0xd2, 0x8a, 0xec, 0x02, 0x75, 0x69, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf0, 0x38, 0xb4, 0x96, 0x49, 0xff, 0xc2, 0xbd, 0xf0, 0x7c, 0xc2, 0xbd, 0xf0, 0xfc, 0x01, 0xea, 0x1c, 0x08, 0x02, 0xea, 0x1c, 0x08, 0x82, 0x00, 0x00, 0xff, 0x40, 0xde, 0x77, 0x83, 0x21, 0x12, 0xdc, 0x42, 0x04, 0x29, 0x90, 0x23, 0xca, 0xe5, 0xc8, 0x76, 0x7f, 0x29, 0x90, 0x23, 0xca, 0xe5, 0xc8, 0x76, 0xff, 0x91, 0xf7, 0x50, 0x37, 0x9e, 0x78, 0x66, 0x00, 0x91, 0xf7, 0x50, 0x37, 0x9e, 0x78, 0x66, 0x80, 0x11, 0x09, 0x2a, 0x11, 0x09, 0x32, 0x11, 0x09, 0x3a, 0x0f, 0x71, 0x75, 0x75, 0x78, 0x1f, 0x63, 0x6f, 0x72, 0x67, 0x65, 0x3f, 0x67, 0x72, 0x61, 0x75, 0x6c, 0x74, 0x11, 0x09, 0x32, 0x11, 0x09, 0x2a, 0x11, 0x09, 0x22, 0x3f, 0x67, 0x61, 0x72, 0x70, 0x6c, 0x79, 0x1f, 0x77, 0x61, 0x6c, 0x64, 0x6f, 0x0f, 0x66, 0x72, 0x65, 0x64, 0x51, 0x0c, 0x06, 0x14, 0x00, 0x05, 0x13, 0x1d, 0x01, 0x7a, 0x00, 0x18, 0x11, 0xbd, 0x7a, 0x00, 0x18, 0x11, 0x5d, 0x7a, 0x00, 0x12, 0xff, 0x78, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x3f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x31, 0xff, 0x78, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x3f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x32, 0xff, 0x78, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x3f, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x33, 0x15, 0x03, 0x01, 0x06]).buffer);
  static readonly ENUM_CONST = 5;
  static readonly VOID_LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x01, 0x11, 0x01, 0x30]).buffer);
  static readonly BOOL_LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x21, 0x01, 0x09]).buffer);
  static readonly INT8LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x12, 0x03, 0x6f, 0x91]).buffer);
  static readonly INT16LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x13, 0x0f, 0x67, 0x2b, 0x99, 0xd4]).buffer);
  static readonly INT32LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x14, 0xff, 0xc7, 0x6b, 0x9f, 0x06, 0x39, 0x94, 0x60, 0xf9, 0x00]).buffer);
  static readonly INT64LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x03, 0x11, 0x01, 0x15, 0xff, 0xc7, 0x71, 0xc4, 0x2b, 0xab, 0x75, 0x6b, 0x0f, 0x01, 0x39, 0x8e, 0x3b, 0xd4, 0x54, 0x8a, 0x94, 0xf0]).buffer);
  static readonly UINT8LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x12, 0x03, 0x6f, 0xde]).buffer);
  static readonly UINT16LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x13, 0x0f, 0x35, 0x82, 0x9c, 0xad]).buffer);
  static readonly UINT32LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x0c, 0x0f, 0x55, 0xa1, 0xae, 0xc6]).buffer);
  static readonly UINT64LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x0d, 0xff, 0xc7, 0x71, 0xac, 0xb5, 0xaf, 0x98, 0x32, 0x9a, 0x00]).buffer);
  static readonly FLOAT32LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x03, 0x11, 0x01, 0x24, 0xce, 0x9c, 0xad, 0x45, 0x80, 0x7f, 0xcc, 0x80, 0xff, 0xc0, 0x7f]).buffer);
  static readonly FLOAT64LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x05, 0x11, 0x01, 0x25, 0xf0, 0xc0, 0x61, 0xbe, 0x40, 0xc0, 0xf0, 0x7f, 0xc0, 0xf0, 0xff, 0xc0, 0xf8, 0x7f]).buffer);
  static readonly TEXT_LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x07, 0x11, 0x01, 0x1e, 0x11, 0x09, 0x32, 0x11, 0x09, 0x32, 0x11, 0x09, 0x2a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x68, 0x1f, 0x78, 0x79, 0x7a, 0x7a, 0x79, 0x0f, 0x74, 0x68, 0x75, 0x64]).buffer);
  static readonly DATA_LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x08, 0x11, 0x01, 0x1e, 0x11, 0x09, 0x22, 0x11, 0x09, 0x4a, 0x11, 0x0d, 0x3a, 0x0f, 0x6f, 0x6f, 0x70, 0x73, 0xff, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x00, 0x01, 0x64, 0x7f, 0x72, 0x66, 0x63, 0x33, 0x30, 0x39, 0x32]).buffer);
  static readonly STRUCT_LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x56, 0x31, 0x01, 0x77, 0x02, 0x51, 0x0c, 0x06, 0x14, 0x00, 0x05, 0x13, 0x1d, 0x01, 0x6a, 0x00, 0x18, 0x11, 0xbd, 0x6a, 0x00, 0x18, 0x11, 0x5d, 0x6a, 0x00, 0x12, 0xff, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6c, 0x69, 0x00, 0x0f, 0x73, 0x74, 0x20, 0x31, 0xff, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6c, 0x69, 0x00, 0x0f, 0x73, 0x74, 0x20, 0x32, 0xff, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6c, 0x69, 0x00, 0x0f, 0x73, 0x74, 0x20, 0x33]).buffer);
  static readonly ENUM_LIST_CONST = $.readRawPointer(new Uint8Array([0x10, 0x02, 0x11, 0x01, 0x13, 0x04, 0x07]).buffer);
  static readonly _capnp = {
    displayName: "TestConstants",
    id: "abed745cd8c92095",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestConstants_" + super.toString();
  }
}
export class TestAnyPointerConstants extends $.Struct {
  static readonly _capnp = {
    displayName: "TestAnyPointerConstants",
    id: "ddc280dbee9c99b3",
    size: new $.ObjectSize(0, 4)
  };
  adoptAnyKindAsStruct(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownAnyKindAsStruct(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyKindAsStruct());
  }
  getAnyKindAsStruct(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasAnyKindAsStruct(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setAnyKindAsStruct(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptAnyStructAsStruct(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownAnyStructAsStruct(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyStructAsStruct());
  }
  getAnyStructAsStruct(): $.Pointer {
    return $.Struct.getPointer(1, this);
  }
  hasAnyStructAsStruct(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  setAnyStructAsStruct(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  adoptAnyKindAsList(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(2, this));
  }
  disownAnyKindAsList(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyKindAsList());
  }
  getAnyKindAsList(): $.Pointer {
    return $.Struct.getPointer(2, this);
  }
  hasAnyKindAsList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(2, this));
  }
  setAnyKindAsList(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(2, this));
  }
  adoptAnyListAsList(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(3, this));
  }
  disownAnyListAsList(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getAnyListAsList());
  }
  getAnyListAsList(): $.Pointer {
    return $.Struct.getPointer(3, this);
  }
  hasAnyListAsList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(3, this));
  }
  setAnyListAsList(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(3, this));
  }
  toString(): string {
    return "TestAnyPointerConstants_" + super.toString();
  }
}
export class TestInterface extends $.Struct {
  static readonly _capnp = {
    displayName: "TestInterface",
    id: "88eb12a0e0af92b2",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestInterface_" + super.toString();
  }
}
export class TestExtends extends $.Struct {
  static readonly _capnp = {
    displayName: "TestExtends",
    id: "e4e9bac98670b748",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestExtends_" + super.toString();
  }
}
export class TestExtends2 extends $.Struct {
  static readonly _capnp = {
    displayName: "TestExtends2",
    id: "98d7e0ef61488783",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestExtends2_" + super.toString();
  }
}
export class TestPipeline_Box extends $.Struct {
  static readonly _capnp = {
    displayName: "Box",
    id: "b0b29e51db0e26b1",
    size: new $.ObjectSize(0, 1)
  };
  getCap(): $.Interface {
    return $.Struct.getPointerAs(0, $.Interface, this);
  }
  setCap(value: $.Interface): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestPipeline_Box_" + super.toString();
  }
}
export class TestPipeline_AnyBox extends $.Struct {
  static readonly _capnp = {
    displayName: "AnyBox",
    id: "9442ad5a1d2c8acb",
    size: new $.ObjectSize(0, 1)
  };
  adoptCap(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownCap(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getCap());
  }
  getCap(): $.Pointer {
    return $.Struct.getPointer(0, this);
  }
  hasCap(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  setCap(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestPipeline_AnyBox_" + super.toString();
  }
}
export class TestPipeline extends $.Struct {
  static readonly Box = TestPipeline_Box;
  static readonly AnyBox = TestPipeline_AnyBox;
  static readonly _capnp = {
    displayName: "TestPipeline",
    id: "a5a404caa61d4cd0",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestPipeline_" + super.toString();
  }
}
export class TestCallOrder extends $.Struct {
  static readonly _capnp = {
    displayName: "TestCallOrder",
    id: "a0e77035bdff0051",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestCallOrder_" + super.toString();
  }
}
export class TestTailCallee_TailResult extends $.Struct {
  static readonly _capnp = {
    displayName: "TailResult",
    id: "a9ed2e5a9fd53d19",
    size: new $.ObjectSize(8, 2)
  };
  getI(): number {
    return $.Struct.getUint32(0, this);
  }
  setI(value: number): void {
    $.Struct.setUint32(0, value, this);
  }
  getT(): string {
    return $.Struct.getText(0, this);
  }
  setT(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getC(): $.Interface {
    return $.Struct.getPointerAs(1, $.Interface, this);
  }
  setC(value: $.Interface): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestTailCallee_TailResult_" + super.toString();
  }
}
export class TestTailCallee extends $.Struct {
  static readonly TailResult = TestTailCallee_TailResult;
  static readonly _capnp = {
    displayName: "TestTailCallee",
    id: "ddd699207eb8e23b",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestTailCallee_" + super.toString();
  }
}
export class TestTailCaller extends $.Struct {
  static readonly _capnp = {
    displayName: "TestTailCaller",
    id: "870bf40110ce3035",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestTailCaller_" + super.toString();
  }
}
export class TestHandle extends $.Struct {
  static readonly _capnp = {
    displayName: "TestHandle",
    id: "a38e5efe41e53a15",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestHandle_" + super.toString();
  }
}
export class TestMoreStuff extends $.Struct {
  static readonly _capnp = {
    displayName: "TestMoreStuff",
    id: "ddc70bf9784133cf",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestMoreStuff_" + super.toString();
  }
}
export class TestMembrane_Thing extends $.Struct {
  static readonly _capnp = {
    displayName: "Thing",
    id: "9352e4e41f173917",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestMembrane_Thing_" + super.toString();
  }
}
export class TestMembrane_Result extends $.Struct {
  static readonly _capnp = {
    displayName: "Result",
    id: "b0c6163faf291965",
    size: new $.ObjectSize(0, 1)
  };
  getText(): string {
    return $.Struct.getText(0, this);
  }
  setText(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestMembrane_Result_" + super.toString();
  }
}
export class TestMembrane extends $.Struct {
  static readonly Thing = TestMembrane_Thing;
  static readonly Result = TestMembrane_Result;
  static readonly _capnp = {
    displayName: "TestMembrane",
    id: "c07d8dcd80a69c0c",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestMembrane_" + super.toString();
  }
}
export class TestContainMembrane extends $.Struct {
  static readonly _capnp = {
    displayName: "TestContainMembrane",
    id: "949449ad7c11fa5c",
    size: new $.ObjectSize(0, 2)
  };
  getCap(): $.Interface {
    return $.Struct.getPointerAs(0, $.Interface, this);
  }
  setCap(value: $.Interface): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptList(value: $.Orphan<$.List<$.Interface>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownList(): $.Orphan<$.List<$.Interface>> {
    return $.Struct.disown(this.getList());
  }
  getList(): $.List<$.Interface> {
    return $.Struct.getList(1, $.InterfaceList, this);
  }
  hasList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  initList(length: number): $.List<$.Interface> {
    return $.Struct.initList(1, $.InterfaceList, length, this);
  }
  setList(value: $.List<$.Interface>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestContainMembrane_" + super.toString();
  }
}
export class TestTransferCap_Element extends $.Struct {
  static readonly _capnp = {
    displayName: "Element",
    id: "c7263e8f88844abc",
    size: new $.ObjectSize(0, 2)
  };
  getText(): string {
    return $.Struct.getText(0, this);
  }
  setText(value: string): void {
    $.Struct.setText(0, value, this);
  }
  getCap(): $.Interface {
    return $.Struct.getPointerAs(1, $.Interface, this);
  }
  setCap(value: $.Interface): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestTransferCap_Element_" + super.toString();
  }
}
export class TestTransferCap extends $.Struct {
  static readonly Element = TestTransferCap_Element;
  static readonly _capnp = {
    displayName: "TestTransferCap",
    id: "dd2b66a791a279f0",
    size: new $.ObjectSize(0, 1)
  };
  static _List: $.ListCtor<TestTransferCap_Element>;
  adoptList(value: $.Orphan<$.List<TestTransferCap_Element>>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownList(): $.Orphan<$.List<TestTransferCap_Element>> {
    return $.Struct.disown(this.getList());
  }
  getList(): $.List<TestTransferCap_Element> {
    return $.Struct.getList(0, TestTransferCap._List, this);
  }
  hasList(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initList(length: number): $.List<TestTransferCap_Element> {
    return $.Struct.initList(0, TestTransferCap._List, length, this);
  }
  setList(value: $.List<TestTransferCap_Element>): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestTransferCap_" + super.toString();
  }
}
export class TestKeywordMethods extends $.Struct {
  static readonly _capnp = {
    displayName: "TestKeywordMethods",
    id: "9ae342d394247cfc",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestKeywordMethods_" + super.toString();
  }
}
export class TestAuthenticatedBootstrap extends $.Struct {
  static readonly _capnp = {
    displayName: "TestAuthenticatedBootstrap",
    id: "ea72cc77253798cd",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestAuthenticatedBootstrap_" + super.toString();
  }
}
export class TestSturdyRef extends $.Struct {
  static readonly _capnp = {
    displayName: "TestSturdyRef",
    id: "ceba982cb629f6c2",
    size: new $.ObjectSize(0, 2)
  };
  adoptHostId(value: $.Orphan<TestSturdyRefHostId>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownHostId(): $.Orphan<TestSturdyRefHostId> {
    return $.Struct.disown(this.getHostId());
  }
  getHostId(): TestSturdyRefHostId {
    return $.Struct.getStruct(0, TestSturdyRefHostId, this);
  }
  hasHostId(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initHostId(): TestSturdyRefHostId {
    return $.Struct.initStructAt(0, TestSturdyRefHostId, this);
  }
  setHostId(value: TestSturdyRefHostId): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  adoptObjectId(value: $.Orphan<$.Pointer>): void {
    $.Struct.adopt(value, $.Struct.getPointer(1, this));
  }
  disownObjectId(): $.Orphan<$.Pointer> {
    return $.Struct.disown(this.getObjectId());
  }
  getObjectId(): $.Pointer {
    return $.Struct.getPointer(1, this);
  }
  hasObjectId(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(1, this));
  }
  setObjectId(value: $.Pointer): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(1, this));
  }
  toString(): string {
    return "TestSturdyRef_" + super.toString();
  }
}
export class TestSturdyRefHostId extends $.Struct {
  static readonly _capnp = {
    displayName: "TestSturdyRefHostId",
    id: "e02d3bbe1010e342",
    size: new $.ObjectSize(0, 1)
  };
  getHost(): string {
    return $.Struct.getText(0, this);
  }
  setHost(value: string): void {
    $.Struct.setText(0, value, this);
  }
  toString(): string {
    return "TestSturdyRefHostId_" + super.toString();
  }
}
export const TestSturdyRefObjectId_Tag = {
  TEST_INTERFACE: 0,
  TEST_EXTENDS: 1,
  TEST_PIPELINE: 2,
  TEST_TAIL_CALLEE: 3,
  TEST_TAIL_CALLER: 4,
  TEST_MORE_STUFF: 5
} as const;
export type TestSturdyRefObjectId_Tag = (typeof TestSturdyRefObjectId_Tag)[keyof typeof TestSturdyRefObjectId_Tag];
export class TestSturdyRefObjectId extends $.Struct {
  static readonly Tag = TestSturdyRefObjectId_Tag;
  static readonly _capnp = {
    displayName: "TestSturdyRefObjectId",
    id: "aeb2ad168e2f5697",
    size: new $.ObjectSize(8, 0)
  };
  getTag(): TestSturdyRefObjectId_Tag {
    return $.Struct.getUint16(0, this) as TestSturdyRefObjectId_Tag;
  }
  setTag(value: TestSturdyRefObjectId_Tag): void {
    $.Struct.setUint16(0, value, this);
  }
  toString(): string {
    return "TestSturdyRefObjectId_" + super.toString();
  }
}
export class TestProvisionId extends $.Struct {
  static readonly _capnp = {
    displayName: "TestProvisionId",
    id: "9e5c574772b1d462",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestProvisionId_" + super.toString();
  }
}
export class TestRecipientId extends $.Struct {
  static readonly _capnp = {
    displayName: "TestRecipientId",
    id: "ea2fb7dca9cdbdea",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestRecipientId_" + super.toString();
  }
}
export class TestThirdPartyCapId extends $.Struct {
  static readonly _capnp = {
    displayName: "TestThirdPartyCapId",
    id: "a805157b98b65469",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestThirdPartyCapId_" + super.toString();
  }
}
export class TestJoinResult extends $.Struct {
  static readonly _capnp = {
    displayName: "TestJoinResult",
    id: "f4c58a8ebcd0f600",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestJoinResult_" + super.toString();
  }
}
export const TestNameAnnotation_BadlyNamedEnum = {
  FOO: 0,
  BAR: 1,
  BAZ: 2
} as const;
export type TestNameAnnotation_BadlyNamedEnum = (typeof TestNameAnnotation_BadlyNamedEnum)[keyof typeof TestNameAnnotation_BadlyNamedEnum];
export const TestNameAnnotation_NestedStruct_DeeplyNestedEnum = {
  QUUX: 0,
  CORGE: 1,
  GRAULT: 2
} as const;
export type TestNameAnnotation_NestedStruct_DeeplyNestedEnum = (typeof TestNameAnnotation_NestedStruct_DeeplyNestedEnum)[keyof typeof TestNameAnnotation_NestedStruct_DeeplyNestedEnum];
export class TestNameAnnotation_NestedStruct extends $.Struct {
  static readonly DeeplyNestedEnum = TestNameAnnotation_NestedStruct_DeeplyNestedEnum;
  static readonly _capnp = {
    displayName: "NestedStruct",
    id: "be406b6341d52284",
    size: new $.ObjectSize(8, 1)
  };
  getBadNestedFieldName(): boolean {
    return $.Struct.getBit(0, this);
  }
  setBadNestedFieldName(value: boolean): void {
    $.Struct.setBit(0, value, this);
  }
  adoptAnotherBadNestedFieldName(value: $.Orphan<TestNameAnnotation_NestedStruct>): void {
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownAnotherBadNestedFieldName(): $.Orphan<TestNameAnnotation_NestedStruct> {
    return $.Struct.disown(this.getAnotherBadNestedFieldName());
  }
  getAnotherBadNestedFieldName(): TestNameAnnotation_NestedStruct {
    return $.Struct.getStruct(0, TestNameAnnotation_NestedStruct, this);
  }
  hasAnotherBadNestedFieldName(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initAnotherBadNestedFieldName(): TestNameAnnotation_NestedStruct {
    return $.Struct.initStructAt(0, TestNameAnnotation_NestedStruct, this);
  }
  setAnotherBadNestedFieldName(value: TestNameAnnotation_NestedStruct): void {
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestNameAnnotation_NestedStruct_" + super.toString();
  }
}
export class TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup extends $.Struct {
  static readonly _capnp = {
    displayName: "badlyNamedGroup",
    id: "c3594bce5b24b722",
    size: new $.ObjectSize(8, 1)
  };
  toString(): string {
    return "TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup_" + super.toString();
  }
}
export const TestNameAnnotation_BadlyNamedUnion_Which = {
  BADLY_NAMED_GROUP: 0,
  BAZ: 1
} as const;
export type TestNameAnnotation_BadlyNamedUnion_Which = (typeof TestNameAnnotation_BadlyNamedUnion_Which)[keyof typeof TestNameAnnotation_BadlyNamedUnion_Which];
export class TestNameAnnotation_BadlyNamedUnion extends $.Struct {
  static readonly BADLY_NAMED_GROUP = TestNameAnnotation_BadlyNamedUnion_Which.BADLY_NAMED_GROUP;
  static readonly BAZ = TestNameAnnotation_BadlyNamedUnion_Which.BAZ;
  static readonly _capnp = {
    displayName: "badlyNamedUnion",
    id: "89d9d1626b34017c",
    size: new $.ObjectSize(8, 1)
  };
  getBadlyNamedGroup(): TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup {
    $.Struct.testWhich("badlyNamedGroup", $.Struct.getUint16(6, this), 0, this);
    return $.Struct.getAs(TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup, this);
  }
  initBadlyNamedGroup(): TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup {
    $.Struct.setUint16(6, 0, this);
    return $.Struct.getAs(TestNameAnnotation_BadlyNamedUnion_BadlyNamedGroup, this);
  }
  isBadlyNamedGroup(): boolean {
    return $.Struct.getUint16(6, this) === 0;
  }
  setBadlyNamedGroup(): void {
    $.Struct.setUint16(6, 0, this);
  }
  adoptBaz(value: $.Orphan<TestNameAnnotation_NestedStruct>): void {
    $.Struct.setUint16(6, 1, this);
    $.Struct.adopt(value, $.Struct.getPointer(0, this));
  }
  disownBaz(): $.Orphan<TestNameAnnotation_NestedStruct> {
    return $.Struct.disown(this.getBaz());
  }
  getBaz(): TestNameAnnotation_NestedStruct {
    $.Struct.testWhich("baz", $.Struct.getUint16(6, this), 1, this);
    return $.Struct.getStruct(0, TestNameAnnotation_NestedStruct, this);
  }
  hasBaz(): boolean {
    return !$.Struct.isNull($.Struct.getPointer(0, this));
  }
  initBaz(): TestNameAnnotation_NestedStruct {
    $.Struct.setUint16(6, 1, this);
    return $.Struct.initStructAt(0, TestNameAnnotation_NestedStruct, this);
  }
  isBaz(): boolean {
    return $.Struct.getUint16(6, this) === 1;
  }
  setBaz(value: TestNameAnnotation_NestedStruct): void {
    $.Struct.setUint16(6, 1, this);
    $.Struct.copyFrom(value, $.Struct.getPointer(0, this));
  }
  toString(): string {
    return "TestNameAnnotation_BadlyNamedUnion_" + super.toString();
  }
  which(): TestNameAnnotation_BadlyNamedUnion_Which {
    return $.Struct.getUint16(6, this) as TestNameAnnotation_BadlyNamedUnion_Which;
  }
}
export const TestNameAnnotation_Which = {
  BAD_FIELD_NAME: 0,
  BAR: 1
} as const;
export type TestNameAnnotation_Which = (typeof TestNameAnnotation_Which)[keyof typeof TestNameAnnotation_Which];
export class TestNameAnnotation extends $.Struct {
  static readonly BAD_FIELD_NAME = TestNameAnnotation_Which.BAD_FIELD_NAME;
  static readonly BAR = TestNameAnnotation_Which.BAR;
  static readonly BadlyNamedEnum = TestNameAnnotation_BadlyNamedEnum;
  static readonly NestedStruct = TestNameAnnotation_NestedStruct;
  static readonly _capnp = {
    displayName: "TestNameAnnotation",
    id: "d1fd8e9caf2a5d58",
    size: new $.ObjectSize(8, 1)
  };
  getBadFieldName(): boolean {
    $.Struct.testWhich("badFieldName", $.Struct.getUint16(2, this), 0, this);
    return $.Struct.getBit(0, this);
  }
  isBadFieldName(): boolean {
    return $.Struct.getUint16(2, this) === 0;
  }
  setBadFieldName(value: boolean): void {
    $.Struct.setUint16(2, 0, this);
    $.Struct.setBit(0, value, this);
  }
  getBar(): number {
    $.Struct.testWhich("bar", $.Struct.getUint16(2, this), 1, this);
    return $.Struct.getInt8(0, this);
  }
  isBar(): boolean {
    return $.Struct.getUint16(2, this) === 1;
  }
  setBar(value: number): void {
    $.Struct.setUint16(2, 1, this);
    $.Struct.setInt8(0, value, this);
  }
  getAnotherBadFieldName(): TestNameAnnotation_BadlyNamedEnum {
    return $.Struct.getUint16(4, this) as TestNameAnnotation_BadlyNamedEnum;
  }
  setAnotherBadFieldName(value: TestNameAnnotation_BadlyNamedEnum): void {
    $.Struct.setUint16(4, value, this);
  }
  getBadlyNamedUnion(): TestNameAnnotation_BadlyNamedUnion {
    return $.Struct.getAs(TestNameAnnotation_BadlyNamedUnion, this);
  }
  initBadlyNamedUnion(): TestNameAnnotation_BadlyNamedUnion {
    return $.Struct.getAs(TestNameAnnotation_BadlyNamedUnion, this);
  }
  toString(): string {
    return "TestNameAnnotation_" + super.toString();
  }
  which(): TestNameAnnotation_Which {
    return $.Struct.getUint16(2, this) as TestNameAnnotation_Which;
  }
}
export class TestNameAnnotationInterface extends $.Struct {
  static readonly _capnp = {
    displayName: "TestNameAnnotationInterface",
    id: "d112a69d31ed918b",
    size: new $.ObjectSize(0, 0)
  };
  toString(): string {
    return "TestNameAnnotationInterface_" + super.toString();
  }
}
TestAllTypes._StructList = $.CompositeList(TestAllTypes);
TestDefaults._StructList = $.CompositeList(TestAllTypes);
TestLists._List0 = $.CompositeList(TestLists_Struct0);
TestLists._List1 = $.CompositeList(TestLists_Struct1);
TestLists._List8 = $.CompositeList(TestLists_Struct8);
TestLists._List16 = $.CompositeList(TestLists_Struct16);
TestLists._List32 = $.CompositeList(TestLists_Struct32);
TestLists._List64 = $.CompositeList(TestLists_Struct64);
TestLists._ListP = $.CompositeList(TestLists_StructP);
TestLists._Int32ListList = $.PointerList($.Int32List);
TestLists._TextListList = $.PointerList($.TextList);
TestLists._StructListList = $.PointerList($.CompositeList(TestAllTypes));
TestPrintInlineStructs._StructList = $.CompositeList(TestPrintInlineStructs_InlineStruct);
TestTransferCap._List = $.CompositeList(TestTransferCap_Element);
