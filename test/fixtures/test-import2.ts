// This file has been automatically generated by capnp-es. 
import * as capnp from "capnp-es";
import { Node, Node_Parameter, Node_NestedNode, Field, Enumerant, Superclass, Method, Type, Brand, Brand_Scope, Brand_Binding, Value, Annotation, ElementSize } from "capnp-es/std/schema";
import { TestImport } from "./test-import.js";
import { TestEnum, TestAllTypes, TestDefaults, TestAnyPointer, TestAnyOthers, TestOutOfOrder, TestUnion, TestUnnamedUnion, TestUnionInUnion, TestGroups, TestInterleavedGroups, TestUnionDefaults, TestNestedTypes, TestNestedTypes_NestedEnum, TestNestedTypes_NestedStruct, TestNestedTypes_NestedStruct_NestedEnum, TestUsing, TestLists, TestLists_Struct0, TestLists_Struct1, TestLists_Struct8, TestLists_Struct16, TestLists_Struct32, TestLists_Struct64, TestLists_StructP, TestLists_Struct0c, TestLists_Struct1c, TestLists_Struct8c, TestLists_Struct16c, TestLists_Struct32c, TestLists_Struct64c, TestLists_StructPc, TestFieldZeroIsBit, TestListDefaults, TestLateUnion, TestOldVersion, TestNewVersion, TestOldUnionVersion, TestNewUnionVersion, TestStructUnion, TestStructUnion_SomeStruct, TestPrintInlineStructs, TestPrintInlineStructs_InlineStruct, TestWholeFloatDefault, TestGenerics, TestGenerics_Inner, TestGenerics_Inner2, TestGenerics_Inner2_DeepNest, TestGenerics_UseAliases, TestGenericsWrapper, TestGenericsWrapper2, TestGenericsUnion, TestUseGenerics, TestEmptyStruct, TestConstants, TestAnyPointerConstants, TestPipeline_Box, TestPipeline_AnyBox, TestTailCallee_TailResult, TestMembrane_Result, TestContainMembrane, TestTransferCap, TestTransferCap_Element, TestSturdyRef, TestSturdyRefHostId, TestSturdyRefObjectId, TestSturdyRefObjectId_Tag, TestProvisionId, TestRecipientId, TestThirdPartyCapId, TestJoinResult, TestNameAnnotation, TestNameAnnotation_BadlyNamedEnum, TestNameAnnotation_NestedStruct, TestNameAnnotation_NestedStruct_DeeplyNestedEnum } from "./test.js";
export const _capnpFileId = BigInt("0xc64a3bf0338a124a");
export class TestImport2 extends capnp.Struct {
    static readonly _capnp = { displayName: "TestImport2", id: "f6bd77f100ecb0ff", size: new capnp.ObjectSize(8, 7) };
    adoptFoo(value: capnp.Orphan<TestAllTypes>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(0, this)); }
    disownFoo(): capnp.Orphan<TestAllTypes> { return capnp.Struct.disown(this.getFoo()); }
    getFoo(): TestAllTypes { return capnp.Struct.getStruct(0, TestAllTypes, this); }
    hasFoo(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(0, this)); }
    initFoo(): TestAllTypes { return capnp.Struct.initStructAt(0, TestAllTypes, this); }
    setFoo(value: TestAllTypes): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(0, this)); }
    adoptBar(value: capnp.Orphan<Node>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(1, this)); }
    disownBar(): capnp.Orphan<Node> { return capnp.Struct.disown(this.getBar()); }
    getBar(): Node { return capnp.Struct.getStruct(1, Node, this); }
    hasBar(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(1, this)); }
    initBar(): Node { return capnp.Struct.initStructAt(1, Node, this); }
    setBar(value: Node): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(1, this)); }
    adoptBaz(value: capnp.Orphan<TestImport>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(2, this)); }
    disownBaz(): capnp.Orphan<TestImport> { return capnp.Struct.disown(this.getBaz()); }
    getBaz(): TestImport { return capnp.Struct.getStruct(2, TestImport, this); }
    hasBaz(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(2, this)); }
    initBaz(): TestImport { return capnp.Struct.initStructAt(2, TestImport, this); }
    setBaz(value: TestImport): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(2, this)); }
    adoptBox(value: capnp.Orphan<Node_Parameter>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(3, this)); }
    disownBox(): capnp.Orphan<Node_Parameter> { return capnp.Struct.disown(this.getBox()); }
    getBox(): Node_Parameter { return capnp.Struct.getStruct(3, Node_Parameter, this); }
    hasBox(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(3, this)); }
    initBox(): Node_Parameter { return capnp.Struct.initStructAt(3, Node_Parameter, this); }
    setBox(value: Node_Parameter): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(3, this)); }
    adoptBee(value: capnp.Orphan<Node_NestedNode>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(4, this)); }
    disownBee(): capnp.Orphan<Node_NestedNode> { return capnp.Struct.disown(this.getBee()); }
    getBee(): Node_NestedNode { return capnp.Struct.getStruct(4, Node_NestedNode, this); }
    hasBee(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(4, this)); }
    initBee(): Node_NestedNode { return capnp.Struct.initStructAt(4, Node_NestedNode, this); }
    setBee(value: Node_NestedNode): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(4, this)); }
    adoptBok(value: capnp.Orphan<Brand_Scope>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(5, this)); }
    disownBok(): capnp.Orphan<Brand_Scope> { return capnp.Struct.disown(this.getBok()); }
    getBok(): Brand_Scope { return capnp.Struct.getStruct(5, Brand_Scope, this); }
    hasBok(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(5, this)); }
    initBok(): Brand_Scope { return capnp.Struct.initStructAt(5, Brand_Scope, this); }
    setBok(value: Brand_Scope): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(5, this)); }
    adoptBip(value: capnp.Orphan<Brand_Binding>): void { capnp.Struct.adopt(value, capnp.Struct.getPointer(6, this)); }
    disownBip(): capnp.Orphan<Brand_Binding> { return capnp.Struct.disown(this.getBip()); }
    getBip(): Brand_Binding { return capnp.Struct.getStruct(6, Brand_Binding, this); }
    hasBip(): boolean { return !capnp.Struct.isNull(capnp.Struct.getPointer(6, this)); }
    initBip(): Brand_Binding { return capnp.Struct.initStructAt(6, Brand_Binding, this); }
    setBip(value: Brand_Binding): void { capnp.Struct.copyFrom(value, capnp.Struct.getPointer(6, this)); }
    getBep(): ElementSize { return capnp.Struct.getUint16(0, this); }
    setBep(value: ElementSize): void { capnp.Struct.setUint16(0, value, this); }
    toString(): string { return "TestImport2_" + super.toString(); }
}
